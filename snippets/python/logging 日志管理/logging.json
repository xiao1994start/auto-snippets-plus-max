{
  "引入 logging 内置日志库": {
    "prefix": ["import_logging", "ipt_logging"],
    "body": ["import logging", "import logging.handlers"],
    "description": ["引入 logging 内置日志库"]
  },
  "引入 logging 内置日志库.tmpl": {
    "prefix": ["import_logging=", "ipt_logging="],
    "body": [
      "import logging",
      "import logging.handlers",
      "import sys",
      "from pathlib import Path",
      "",
      "",
      "# * Object: 日志输出",
      "class LOG:",
      "    # * class signal",
      "    def __init__(",
      "        self,",
      "        logger_name: str | None = None,",
      "        logger_files: str = \"./Log\",",
      "        logger_file_name: str = \"Log.log\",",
      "        logger_level: str | int | None = 1,",
      "        logger_file_max_count: int = 7,",
      "    ) -> None:",
      "        \"\"\"",
      "        封装 Log 输出功能, 调用该类即可创建一个 Logger 对象.",
      "        注意:",
      "        使用前先检查",
      "        self.log_file_max_count,",
      "        self.log_level,",
      "        self.log_fmt,",
      "        self.log_datefmt,",
      "        self.log_dir,",
      "        self.log_file_name,",
      "        self.log_file,",
      "        是否需要修改.",
      "        调用 createLogger() 方法, 创建 Logger 对象.",
      "        Args:",
      "            logger_name (str, optional): [必填参数]日志文件名(__name__). Defaults to None.",
      "            选择不同级别来记录日志. 设置一个级别, 严重程度低于设置值的日志消息将被忽略",
      "                | 日志级别   丨 数值 丨",
      "                | CRITICAL  |  50  |",
      "                | ERROR     |  40  |",
      "                | WARNING   |  30  | Default level",
      "                | INFO      |  20  |",
      "                | DEBUG     |  10  |",
      "                | NOTSET    |   0  |",
      "            设置日志消息格式",
      "                | %(message)s    | 日志消息内容",
      "                | %(asctime)s    | 创建日志记录可读时间",
      "                | %(filename)s   | 调用日志记录的源文件的文件名",
      "                | %(funcName)s   | 调用日志记录的函数名",
      "                | %(levelname)s  | 当前日志记录的日志级别名称",
      "                | %(lineno)d     | 调用日志记录的源代码所在的行号",
      "                | %(module)s     | 调用日志记录的源代码所在的模块名",
      "                | %(pathname)s   | 调用日志记录的源代码所在的完整路径名",
      "                | %(process)d    | 当前进程ID",
      "                | %(thread)d     | 当前线程ID",
      "                | %(threadName)s | 当前线程名",
      "                | %(exc_info)s   | 异常信息",
      "                | %(exc_text)s   | 异常信息",
      "                | %(stack_info)s | 堆栈信息",
      "        Args:",
      "            logger_name (str | None, optional): 定义 Logger 名称. Defaults to None.",
      "            logger_files (str, optional): 定义 Logger 日志文件输出位置. Defaults to \"./Log\".",
      "            logger_file_name (str, optional): 定义 Logger 日志文件输出名称. Defaults to \"log.log\".",
      "            logger_level (str | int, optional): 定义 Logger 输出等级. Defaults to \"time\".",
      "            logger_file_max_count (int, optional): 定义限制 Logger 日志文件数量的最大值. Defaults to 7.",
      "        \"\"\"",
      "        # ! 标准化日志输出格式",
      "        self.logger_fmt = \"%(asctime)s %(levelname)s %(filename)s %(lineno)d | [%(module)s.%(funcName)s] %(message)s\"",
      "        self.logger_datefmt = \"%Y-%m-%d %H:%M:%S\"",
      "        # * 创建 Logger 输出格式",
      "        self.logher_format = self.init_Format()",
      "        # * 定义 Logger 名称",
      "        self.logger_name = logger_name",
      "        # * 创建日志文件夹 & 日志文件",
      "        self.logger_files = logger_files",
      "        self.logger_dir = Path(",
      "            Path(__file__).parent.resolve(), self.logger_files",
      "        )",
      "        if not self.logger_dir.exists():",
      "            self.logger_dir.mkdir(parents=True, exist_ok=True)",
      "        self.logger_file_name = logger_file_name",
      "        self.logger_file = Path(self.logger_dir, self.logger_file_name)",
      "        # * 定义 Logger 输出等级",
      "        self.logger_level = self.init_Level(logger_level)",
      "        # * 定义限制 Logger 日志文件数量的最大值",
      "        self.logger_file_max_count: int = logger_file_max_count",
      "        # * 创建 Logger 对象",
      "        self.logger = self.init_Logger(self.logger_name)",
      "",
      "    # * Class Function: 输出 self.logger 日志 终端 & 文件 (限制: 无)",
      "    def _Logger(self):",
      "        self.logger.addHandler(self.init_StreamHandler())",
      "        self.logger.addHandler(self.init_FileHandler())",
      "        return self.logger",
      "",
      "    # * Class Function: 输出 self.logger 日志 终端 & 文件 (限制: 无)",
      "    def _LoggerTime(self, logger_when: str = \"D\"):",
      "        self.logger.addHandler(self.init_StreamHandler())",
      "        self.logger.addHandler(self.init_TimedRotatingFileHandler(logger_when))",
      "        return self.logger",
      "",
      "    # * Class Function: 输出 self.logger 日志 终端 & 文件 (限制: 无)",
      "    def _LoggerRotating(self):",
      "        self.logger.addHandler(self.init_StreamHandler())",
      "        self.logger.addHandler(self.init_RotatingFileHandler())",
      "        return self.logger",
      "",
      "    # * Class Function: 创建 Logger 对象 & 设置 Logger 输出等级",
      "    def init_Logger(self, logger_name):",
      "        logger = logging.getLogger(logger_name)",
      "        logger.setLevel(self.logger_level)",
      "        return logger",
      "",
      "    # * Class Function: 创建终端输出句柄 StreamHandler & 设置 StreamHandler 输出等级",
      "    def init_StreamHandler(self):",
      "        log_stream_handler = logging.StreamHandler(sys.stdout)",
      "        log_stream_handler.setFormatter(self.logher_format)",
      "        log_stream_handler.setLevel(self.logger_level)",
      "        return log_stream_handler",
      "",
      "    # * Class Function: 创建 logging.Formatter 对象 & 设置 logging.Formatter 输出格式",
      "    def init_Format(self):",
      "        log_format = logging.Formatter(",
      "            fmt=self.logger_fmt, datefmt=self.logger_datefmt",
      "        )",
      "        return log_format",
      "",
      "    # * Class Function: 创建 FileHandler 文件句柄 & 设置 FileHandler 输出等级",
      "    def init_FileHandler(self):",
      "        log_file_handler = logging.FileHandler(",
      "            self.logger_file, encoding=\"utf-8\"",
      "        )",
      "        log_file_handler.setFormatter(self.logher_format)",
      "        log_file_handler.setLevel(self.logger_level)",
      "        return log_file_handler",
      "",
      "    # * Class Function: 初始化 RotatingFileHandler 日志文件管理对象",
      "    def init_RotatingFileHandler(self):",
      "        \"\"\"",
      "        RotatingFileHandler 是 Python 自带的日志处理器之一, 用于将日志写入到指定的文件中, 并控制文件大小和数量, 可实现日志轮转（即备份旧日志并创建新的日志.",
      "",
      "        class logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False)",
      "",
      "        RotatingFileHandler 的各参数解释:",
      "            1.filename   : 文件名, 指定日志文件的路径和名称;",
      "            2.mode       : 模式, 可选值为 'a' 或 'w'. 当为 'a' 时, 表示以追加方式写入日志; 当为 'w' 时, 表示以覆盖方式写入日志. 默认值为 'a';",
      "            3.maxBytes   : 单个日志文件的最大大小, 单位为字节. 当日志文件达到该大小时, 会自动备份旧日志并创建新的日志文件. 默认值为 0, 表示不限制日志文件大小;",
      "            4.backupCount: 备份文件数目. 当生成的日志文件数量超过该数目时, 会自动删除旧的备份日志文件. 默认值为 0, 表示不备份;",
      "            5.encoding   : 日志文件的编码格式, 默认为 None, 表示使用系统默认编码;",
      "            6.delay      : 是否延时打开文件, 可选值为 True 和 False. 当为 True 时, 表示延时打开文件, 即在第一次写入日志时才打开日志文件. 当为 False 时, 表示在初始化时即打开日志文件. 默认值为 False;",
      "        Returns:",
      "            RotatingFileHandler: RotatingFileHandler 实例化对象",
      "        \"\"\"",
      "        logger_fils_handlers = logging.handlers.RotatingFileHandler(",
      "            filename=self.logger_file,",
      "            mode=\"a\",",
      "            maxBytes=int(",
      "                1024 * 1024 * 10",
      "            ),  # 限制日志文件大小(单位: B-字节; 1KB = 1024B)",
      "            backupCount=self.logger_file_max_count,  # 限制日志文件数量",
      "            encoding=\"utf-8\",",
      "        )",
      "        logger_fils_handlers.setLevel(self.logger_level)",
      "        logger_fils_handlers.setFormatter(self.logher_format)",
      "        return logger_fils_handlers",
      "",
      "    # * Class Function: 初始化 TimedRotatingFileHandler 日志文件管理对象",
      "    def init_TimedRotatingFileHandler(self, logger_when: str = \"D\"):",
      "        \"\"\"",
      "        TimedRotatingFileHandler 是 Python 自带的日志处理器之一, 与 RotatingFileHandler 类似, 也用于将日志写入到指定的文件中, 并对文件进行切割. 不同的是TimedRotatingFileHandler 可以按照时间轮转日志, 例如每天或每小时生成一个新的日志文件.",
      "",
      "        class logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None)",
      "",
      "        TimedRotatingFileHandler 的各参数的详解:",
      "            1.filename    : 文件名, 指定日志文件的路径和名称;",
      "            2.when        : 日志轮转的时间间隔, 可选值为 'S' | 'M' | 'H' | 'D' | 'W' | 'midnight', 分别表示秒 | 分 | 时 | 天 | 周和每天的午夜; 默认值为 'midnight', 即每天的午夜轮转, 值不区分大小写;",
      "            3.interval    : 时间间隔的数量, 默认为 1; 例如, 当 when='D' 且 interval=7 时, 表示每周轮转一次;",
      "            4.backupCount : 备份文件数目; 当生成的日志文件数量超过该数目时, 会自动删除旧的备份日志文件; 默认值为 0, 表示不备份;",
      "            5.encoding    : 日志文件的编码格式, 默认为 None, 表示使用系统默认编码;",
      "            6.delay       : 是否延时打开文件, 可选值为 True 和 False; 当为 True 时, 表示延时打开文件, 即在第一次写入日志时才打开日志文件; 当为 False 时, 表示在初始化时即打开日志文件; 默认值为 False",
      "            7.utc         : 是否使用 UTC 时间, 默认为 False, 表示使用本地时间;",
      "            8.atTime      : 用来设置轮转时间, 格式为 '%H:%M:%S', 默认为午夜 12 点; 需要注意的是该参数仅在when为W/midnight时有效;",
      "        Args:",
      "            logger_when (str, optional): 日志轮转的时间间隔. Defaults to \"D\".",
      "        Returns:",
      "            TimedRotatingFileHandler: TimedRotatingFileHandler 实例化对象",
      "        \"\"\"",
      "        logger_time_handler = logging.handlers.TimedRotatingFileHandler(",
      "            filename=self.logger_file,",
      "            when=logger_when,  # S: 每秒, M: 每分钟, H: 每小时, D: 每天, W: 每周, midnight: 每天凌晨",
      "            interval=1,  # 时间间隔的数量",
      "            backupCount=self.logger_file_max_count,  # 限制日志文件数量",
      "            encoding=\"utf-8\",",
      "        )",
      "        logger_time_handler.setLevel(self.logger_level)",
      "        logger_time_handler.setFormatter(self.logher_format)",
      "        return logger_time_handler",
      "",
      "    # * Class Function: 定义日志输出等级",
      "    def init_Level(self, logger_level):",
      "        match logger_level:",
      "            case 1 | \"debug\":",
      "                return logging.DEBUG",
      "            case 2 | \"info\":",
      "                return logging.INFO",
      "            case 3 | \"warning\":",
      "                return logging.WARNING",
      "            case 4 | \"error\":",
      "                return logging.ERROR",
      "            case 5 | \"critical\":",
      "                return logging.CRITICAL",
      "            case 0 | \"notset\" | _:",
      "                return logging.NOTSET",
      ""
    ],
    "description": "引入 logging 内置日志库.tmpl"
  },
  "logging.Logger.tmpl": {
    "prefix": ["Logger_logging="],
    "body": [
      "# * Object: 日志输出",
      "class LOG:",
      "    # * class signal",
      "    def __init__(",
      "        self,",
      "        logger_name: str | None = None,",
      "        logger_files: str = \"./Log\",",
      "        logger_file_name: str = \"Log.log\",",
      "        logger_level: str | int | None = 1,",
      "        logger_file_max_count: int = 7,",
      "    ) -> None:",
      "        \"\"\"",
      "        封装 Log 输出功能, 调用该类即可创建一个 Logger 对象.",
      "        注意:",
      "        使用前先检查",
      "        self.log_file_max_count,",
      "        self.log_level,",
      "        self.log_fmt,",
      "        self.log_datefmt,",
      "        self.log_dir,",
      "        self.log_file_name,",
      "        self.log_file,",
      "        是否需要修改.",
      "        调用 createLogger() 方法, 创建 Logger 对象.",
      "        Args:",
      "            logger_name (str, optional): [必填参数]日志文件名(__name__). Defaults to None.",
      "            选择不同级别来记录日志. 设置一个级别, 严重程度低于设置值的日志消息将被忽略",
      "                | 日志级别   丨 数值 丨",
      "                | CRITICAL  |  50  |",
      "                | ERROR     |  40  |",
      "                | WARNING   |  30  | Default level",
      "                | INFO      |  20  |",
      "                | DEBUG     |  10  |",
      "                | NOTSET    |   0  |",
      "            设置日志消息格式",
      "                | %(message)s    | 日志消息内容",
      "                | %(asctime)s    | 创建日志记录可读时间",
      "                | %(filename)s   | 调用日志记录的源文件的文件名",
      "                | %(funcName)s   | 调用日志记录的函数名",
      "                | %(levelname)s  | 当前日志记录的日志级别名称",
      "                | %(lineno)d     | 调用日志记录的源代码所在的行号",
      "                | %(module)s     | 调用日志记录的源代码所在的模块名",
      "                | %(pathname)s   | 调用日志记录的源代码所在的完整路径名",
      "                | %(process)d    | 当前进程ID",
      "                | %(thread)d     | 当前线程ID",
      "                | %(threadName)s | 当前线程名",
      "                | %(exc_info)s   | 异常信息",
      "                | %(exc_text)s   | 异常信息",
      "                | %(stack_info)s | 堆栈信息",
      "        Args:",
      "            logger_name (str | None, optional): 定义 Logger 名称. Defaults to None.",
      "            logger_files (str, optional): 定义 Logger 日志文件输出位置. Defaults to \"./Log\".",
      "            logger_file_name (str, optional): 定义 Logger 日志文件输出名称. Defaults to \"log.log\".",
      "            logger_level (str | int, optional): 定义 Logger 输出等级. Defaults to \"time\".",
      "            logger_file_max_count (int, optional): 定义限制 Logger 日志文件数量的最大值. Defaults to 7.",
      "        \"\"\"",
      "        # ! 标准化日志输出格式",
      "        self.logger_fmt = \"%(asctime)s %(levelname)s %(filename)s %(lineno)d | [%(module)s.%(funcName)s] %(message)s\"",
      "        self.logger_datefmt = \"%Y-%m-%d %H:%M:%S\"",
      "        # * 创建 Logger 输出格式",
      "        self.logher_format = self.init_Format()",
      "        # * 定义 Logger 名称",
      "        self.logger_name = logger_name",
      "        # * 创建日志文件夹 & 日志文件",
      "        self.logger_files = logger_files",
      "        self.logger_dir = Path(",
      "            Path(__file__).parent.resolve(), self.logger_files",
      "        )",
      "        if not self.logger_dir.exists():",
      "            self.logger_dir.mkdir(parents=True, exist_ok=True)",
      "        self.logger_file_name = logger_file_name",
      "        self.logger_file = Path(self.logger_dir, self.logger_file_name)",
      "        # * 定义 Logger 输出等级",
      "        self.logger_level = self.init_Level(logger_level)",
      "        # * 定义限制 Logger 日志文件数量的最大值",
      "        self.logger_file_max_count: int = logger_file_max_count",
      "        # * 创建 Logger 对象",
      "        self.logger = self.init_Logger(self.logger_name)",
      "",
      "    # * Class Function: 输出 self.logger 日志 终端 & 文件 (限制: 无)",
      "    def _Logger(self):",
      "        self.logger.addHandler(self.init_StreamHandler())",
      "        self.logger.addHandler(self.init_FileHandler())",
      "        return self.logger",
      "",
      "    # * Class Function: 输出 self.logger 日志 终端 & 文件 (限制: 无)",
      "    def _LoggerTime(self, logger_when: str = \"D\"):",
      "        self.logger.addHandler(self.init_StreamHandler())",
      "        self.logger.addHandler(self.init_TimedRotatingFileHandler(logger_when))",
      "        return self.logger",
      "",
      "    # * Class Function: 输出 self.logger 日志 终端 & 文件 (限制: 无)",
      "    def _LoggerRotating(self):",
      "        self.logger.addHandler(self.init_StreamHandler())",
      "        self.logger.addHandler(self.init_RotatingFileHandler())",
      "        return self.logger",
      "",
      "    # * Class Function: 创建 Logger 对象 & 设置 Logger 输出等级",
      "    def init_Logger(self, logger_name):",
      "        logger = logging.getLogger(logger_name)",
      "        logger.setLevel(self.logger_level)",
      "        return logger",
      "",
      "    # * Class Function: 创建终端输出句柄 StreamHandler & 设置 StreamHandler 输出等级",
      "    def init_StreamHandler(self):",
      "        log_stream_handler = logging.StreamHandler(sys.stdout)",
      "        log_stream_handler.setFormatter(self.logher_format)",
      "        log_stream_handler.setLevel(self.logger_level)",
      "        return log_stream_handler",
      "",
      "    # * Class Function: 创建 logging.Formatter 对象 & 设置 logging.Formatter 输出格式",
      "    def init_Format(self):",
      "        log_format = logging.Formatter(",
      "            fmt=self.logger_fmt, datefmt=self.logger_datefmt",
      "        )",
      "        return log_format",
      "",
      "    # * Class Function: 创建 FileHandler 文件句柄 & 设置 FileHandler 输出等级",
      "    def init_FileHandler(self):",
      "        log_file_handler = logging.FileHandler(",
      "            self.logger_file, encoding=\"utf-8\"",
      "        )",
      "        log_file_handler.setFormatter(self.logher_format)",
      "        log_file_handler.setLevel(self.logger_level)",
      "        return log_file_handler",
      "",
      "    # * Class Function: 初始化 RotatingFileHandler 日志文件管理对象",
      "    def init_RotatingFileHandler(self):",
      "        \"\"\"",
      "        RotatingFileHandler 是 Python 自带的日志处理器之一, 用于将日志写入到指定的文件中, 并控制文件大小和数量, 可实现日志轮转（即备份旧日志并创建新的日志.",
      "",
      "        class logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False)",
      "",
      "        RotatingFileHandler 的各参数解释:",
      "            1.filename   : 文件名, 指定日志文件的路径和名称;",
      "            2.mode       : 模式, 可选值为 'a' 或 'w'. 当为 'a' 时, 表示以追加方式写入日志; 当为 'w' 时, 表示以覆盖方式写入日志. 默认值为 'a';",
      "            3.maxBytes   : 单个日志文件的最大大小, 单位为字节. 当日志文件达到该大小时, 会自动备份旧日志并创建新的日志文件. 默认值为 0, 表示不限制日志文件大小;",
      "            4.backupCount: 备份文件数目. 当生成的日志文件数量超过该数目时, 会自动删除旧的备份日志文件. 默认值为 0, 表示不备份;",
      "            5.encoding   : 日志文件的编码格式, 默认为 None, 表示使用系统默认编码;",
      "            6.delay      : 是否延时打开文件, 可选值为 True 和 False. 当为 True 时, 表示延时打开文件, 即在第一次写入日志时才打开日志文件. 当为 False 时, 表示在初始化时即打开日志文件. 默认值为 False;",
      "        Returns:",
      "            RotatingFileHandler: RotatingFileHandler 实例化对象",
      "        \"\"\"",
      "        logger_fils_handlers = logging.handlers.RotatingFileHandler(",
      "            filename=self.logger_file,",
      "            mode=\"a\",",
      "            maxBytes=int(",
      "                1024 * 1024 * 10",
      "            ),  # 限制日志文件大小(单位: B-字节; 1KB = 1024B)",
      "            backupCount=self.logger_file_max_count,  # 限制日志文件数量",
      "            encoding=\"utf-8\",",
      "        )",
      "        logger_fils_handlers.setLevel(self.logger_level)",
      "        logger_fils_handlers.setFormatter(self.logher_format)",
      "        return logger_fils_handlers",
      "",
      "    # * Class Function: 初始化 TimedRotatingFileHandler 日志文件管理对象",
      "    def init_TimedRotatingFileHandler(self, logger_when: str = \"D\"):",
      "        \"\"\"",
      "        TimedRotatingFileHandler 是 Python 自带的日志处理器之一, 与 RotatingFileHandler 类似, 也用于将日志写入到指定的文件中, 并对文件进行切割. 不同的是TimedRotatingFileHandler 可以按照时间轮转日志, 例如每天或每小时生成一个新的日志文件.",
      "",
      "        class logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None)",
      "",
      "        TimedRotatingFileHandler 的各参数的详解:",
      "            1.filename    : 文件名, 指定日志文件的路径和名称;",
      "            2.when        : 日志轮转的时间间隔, 可选值为 'S' | 'M' | 'H' | 'D' | 'W' | 'midnight', 分别表示秒 | 分 | 时 | 天 | 周和每天的午夜; 默认值为 'midnight', 即每天的午夜轮转, 值不区分大小写;",
      "            3.interval    : 时间间隔的数量, 默认为 1; 例如, 当 when='D' 且 interval=7 时, 表示每周轮转一次;",
      "            4.backupCount : 备份文件数目; 当生成的日志文件数量超过该数目时, 会自动删除旧的备份日志文件; 默认值为 0, 表示不备份;",
      "            5.encoding    : 日志文件的编码格式, 默认为 None, 表示使用系统默认编码;",
      "            6.delay       : 是否延时打开文件, 可选值为 True 和 False; 当为 True 时, 表示延时打开文件, 即在第一次写入日志时才打开日志文件; 当为 False 时, 表示在初始化时即打开日志文件; 默认值为 False",
      "            7.utc         : 是否使用 UTC 时间, 默认为 False, 表示使用本地时间;",
      "            8.atTime      : 用来设置轮转时间, 格式为 '%H:%M:%S', 默认为午夜 12 点; 需要注意的是该参数仅在when为W/midnight时有效;",
      "        Args:",
      "            logger_when (str, optional): 日志轮转的时间间隔. Defaults to \"D\".",
      "        Returns:",
      "            TimedRotatingFileHandler: TimedRotatingFileHandler 实例化对象",
      "        \"\"\"",
      "        logger_time_handler = logging.handlers.TimedRotatingFileHandler(",
      "            filename=self.logger_file,",
      "            when=logger_when,  # S: 每秒, M: 每分钟, H: 每小时, D: 每天, W: 每周, midnight: 每天凌晨",
      "            interval=1,  # 时间间隔的数量",
      "            backupCount=self.logger_file_max_count,  # 限制日志文件数量",
      "            encoding=\"utf-8\",",
      "        )",
      "        logger_time_handler.setLevel(self.logger_level)",
      "        logger_time_handler.setFormatter(self.logher_format)",
      "        return logger_time_handler",
      "",
      "    # * Class Function: 定义日志输出等级",
      "    def init_Level(self, logger_level):",
      "        match logger_level:",
      "            case 1 | \"debug\":",
      "                return logging.DEBUG",
      "            case 2 | \"info\":",
      "                return logging.INFO",
      "            case 3 | \"warning\":",
      "                return logging.WARNING",
      "            case 4 | \"error\":",
      "                return logging.ERROR",
      "            case 5 | \"critical\":",
      "                return logging.CRITICAL",
      "            case 0 | \"notset\" | _:",
      "                return logging.NOTSET",
      ""
    ],
    "description": "logging.Logger.tmpl"
  }
}

{
  "创建class对象": {
    "prefix": ["create_class", "c_class"],
    "body": [
      "class ${1:NewObject}(${2:}):",
      "    # * class default args(类变量) | signal(信号)",
      "    # 调用方法: [className].[argsName] = [value] | self.[argsName] = [value]",
      "    def __init__(self) -> None:",
      "        \"\"\"",
      "        ${3:_summary_}",
      "        \"\"\"",
      "        ...",
      "",
      "    ..."
    ],
    "description": ["创建class对象"]
  },
  "class 父类初始化方法初始化继承属性": {
    "prefix": ["super_init_class", "class_super_init"],
    "body": ["super().__init__()", ""],
    "description": ["class 父类初始化方法初始化继承属性"]
  },
  "class初始化": {
    "prefix": ["create_class_init", "c_class_init"],
    "body": [
      "def __init__(self) -> None:",
      "    \"\"\"",
      "    ${2:_summary_}",
      "    \"\"\"",
      "    ..."
    ],
    "description": ["class初始化"]
  },
  "class类self": {
    "prefix": ["sf_class", "self_class", "class_sf", "class_self"],
    "body": ["self.$0"],
    "description": ["class类self"]
  },
  "创建class - def函数": {
    "prefix": ["create_class_def", "c_class_def"],
    "body": [
      "def ${1:name}(self):",
      "    \"\"\"",
      "    ${2:_summary_}",
      "    \"\"\"",
      "    ..."
    ],
    "description": ["创建class - def函数"]
  },
  "创建def函数": {
    "prefix": ["create_def", "c_def"],
    "body": [
      "def ${1:name}():",
      "    \"\"\"",
      "    ${2:_summary_}",
      "    \"\"\"",
      "    ..."
    ],
    "description": ["创建def函数"]
  },
  "lambda:匿名函数": {
    "prefix": ["create_lambda", "c_lambda"],
    "body": ["lambda ${1:e}: ${2:expr表达式}"],
    "description": ["lambda(匿名函数)", "lambda(匿名函数) [参数]: 表达式"]
  },
  "if_main:运行入口 | 调试运行": {
    "prefix": ["if_main", "if_name_main="],
    "body": [
      "if __name__ == '__main__':",
      "    \"\"\"",
      "    运行入口 | 调试运行",
      "    \"\"\"",
      "    $0",
      "    ..."
    ],
    "description": ["if_main:运行入口 | 调试运行"]
  },
  "if_in_main:运行入口 | 调试运行": {
    "prefix": ["if_mmain", "if_name_in_mp_main="],
    "body": [
      "if __name__ in {'__main__', '__mp_main__'}:",
      "    \"\"\"",
      "    运行入口 | 调试运行 | 多进程[multiprocessing]运行",
      "    \"\"\"",
      "    $0",
      "    ..."
    ],
    "description": ["if_in_main:运行入口 | 调试运行"]
  },
  "dir.object 查看对象属性": {
    "prefix": ["dir_", "dir_object"],
    "body": ["dir($0)"],
    "description": [
      "dir.object 查看对象属性",
      "返回当前作用域中的所有变量, 方法和定义的类型"
    ]
  },
  "setattr.object 设置对象属性": {
    "prefix": ["setattr_", "setattr_object"],
    "body": ["setattr(${1:object}, ${2:'name'}, ${3:value})"],
    "description": ["setattr.object 设置对象属性"]
  },
  "getattr.object 获取对象属性": {
    "prefix": ["getattr_", "getattr_object"],
    "body": ["getattr(${1:object}, ${2:'name'}, ${3|None,0,False|})"],
    "description": ["getattr.object 获取对象属性"]
  },
  "@property.装饰器 将class对象中的方法转换为属性": {
    "prefix": ["@property", "at_property"],
    "body": ["@property  # * ${1:属性方法}"],
    "description": [
      "@property.装饰器 设置class中方法对象的属性",
      "class Student:",
      "    def __init__(self, score):",
      "        self._score = score  # 私有属性，通常用下划线开头表示",
      "",
      "    @property",
      "    def score(self):",
      "        return self._score",
      "",
      "    @score.setter",
      "    def score(self, value):",
      "        if not isinstance(value, (int, float)):",
      "            raise ValueError('分数必须是数字')",
      "        if not 0 <= value <= 100:",
      "            raise ValueError('分数必须在0到100之间')",
      "        self._score = value",
      "",
      "s = Student(85)",
      "print(s.score)  # 访问属性，调用 @property 修饰的 score 方法",
      "s.score = 92    # 设置属性，调用 @score.setter 修饰的 score 方法",
      "# s.score = 101 # 会抛出 ValueError",
      "# s.score = 'abc' # 会抛出 ValueError"
    ]
  },
  "@setter.装饰器 设置class中方法对象的属性": {
    "prefix": ["@setter", "at_setter"],
    "body": [
      "@${1:defName}.setter  # * ${2:设置方法对象属性}",
      "def ${1:defName}(self, value):",
      "    \"\"\"",
      "    设置属性",
      "    \"\"\"",
      "    $0",
      ""
    ],
    "description": [
      "@property.装饰器 设置class中方法对象的属性",
      "class Student:",
      "    def __init__(self, score):",
      "        self._score = score  # 私有属性，通常用下划线开头表示",
      "",
      "    @property",
      "    def score(self):",
      "        return self._score",
      "",
      "    @score.setter",
      "    def score(self, value):",
      "        if not isinstance(value, (int, float)):",
      "            raise ValueError('分数必须是数字')",
      "        if not 0 <= value <= 100:",
      "            raise ValueError('分数必须在0到100之间')",
      "        self._score = value",
      "",
      "s = Student(85)",
      "print(s.score)  # 访问属性，调用 @property 修饰的 score 方法",
      "s.score = 92    # 设置属性，调用 @score.setter 修饰的 score 方法",
      "# s.score = 101 # 会抛出 ValueError",
      "# s.score = 'abc' # 会抛出 ValueError"
    ]
  }
}

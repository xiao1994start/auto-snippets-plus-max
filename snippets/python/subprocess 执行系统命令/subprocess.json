{
  "导入 subprocess 执行系统命令模块": {
    "prefix": ["import subprocess"],
    "body": ["import subprocess  # 执行系统命令模块"],
    "description": ["导入subprocess执行系统命令模块"]
  },
  "subprocess.run 运行命令": {
    "prefix": ["subprocess_run"],
    "body": [
      "subprocess.run($0, shell=True, capture_output=True, check=True, text=True)"
    ],
    "description": [
      "subprocess.run 运行外部命令并等待其完成",
      "    args: 一个列表或字符串, 表示要执行的命令. 使用列表形式更安全, 因为它可以避免 shell 注入风险. 例如 ['ls', '-l'] 而不是 'ls -l'. ",
      "    stdin=subprocess.PIPE 表示允许从标准输入读取数据. ",
      "    stdout: 定义如何处理命令的标准输出, 例如设置为 subprocess.PIPE 可以捕获输出. ",
      "    stderr=subprocess.PIPE 表示将标准错误保存到变量中. ",
      "    check: 布尔值, 默认是 False. 如果设为 True, 命令返回非零退出状态码时会引发 CalledProcessError 异常. 这个参数非常有用, 尤其是在处理必须执行成功的命令时, 可以避免继续执行错误逻辑. ",
      "    shell=True 表示在shell中运行命令, 如果不需要在shell中运行, 可以设置为False. ",
      "    text: 如果设为 True, 会将输出解码为字符串, 否则返回字节类型. ",
      "    返回值是一个CompletedProcess对象, 包含命令执行的结果. "
    ]
  },
  "try:subprocess.run 捕获异常": {
    "prefix": ["try_ subprocess_run"],
    "body": [
      "try:",
      "    subprocess.run($0, shell=True, capture_output=True, check=True, text=True)",
      "except subprocess.CalledProcessError as e:",
      "    print('命令执行失败-信息:', e)",
      "    print('命令执行失败-错误码:', e.returncode)",
      "    print('错误输出:', e.stderr)",
      ""
    ],
    "description": "try:subprocess.run 捕获异常"
  },
  "subprocess.Popen 构造函数": {
    "prefix": ["subprocess_Popen="],
    "body": [
      "subprocess.Popen(",
      "    $0,  # * 传递给Popen的命令列表",
      "    shell=True,  # * 是否在shell中运行命令, 如果不需要在shell中运行, 可以设置为False",
      "    cwd=None,  # * 工作目录, 可以通过cwd='/path/to/dir'来设置工作目录",
      "    env={},  # * 环境变量, 可以通过env={'PATH': '/usr/local/bin'}来设置环境变量",
      "    startupinfo=None,  # * 启动信息, 可以通过startupinfo={'title': 'My Program'}来设置启动信息",
      "    stdin=subprocess.PIPE,  # * 标准输入, 可以通过stdin=subprocess.PIPE来设置标准输入",
      "    stdout=subprocess.PIPE,  # * 标准输出, 可以通过stdout=subprocess.PIPE来设置标准输出",
      "    stderr=subprocess.PIPE,  # * 标准错误输出, 可以通过stderr=subprocess.PIPE来设置标准错误输出",
      ")"
    ],
    "description": [
      "subprocess.Popen 构造函数",
      "    shell=True 表示在shell中运行命令, 如果不需要在shell中运行, 可以设置为False",
      "    stdin=subprocess.PIPE 表示允许从标准输入读取数据",
      "    stdout=subprocess.PIPE 表示将标准输出保存到变量中",
      "    stderr=subprocess.PIPE 表示将标准错误保存到变量中",
      "    返回值是一个CompletedProcess对象, 包含命令执行的结果"
    ]
  },
  "subprocess.getoutput 接收字符串格式的命令": {
    "prefix": ["subprocess_getoutput"],
    "body": ["subprocess.getoutput()"],
    "description": [
      "subprocess.getoutput 接收字符串格式的命令",
      "执行命令并返回执行结果, 其功能类似于os.popen(cmd).read()和commands.getoutput(cmd)",
      "常用 subprocess.getoutput().split() ->list[str] 获取结果列表",
      "或者 subprocess.getoutput().splitlines() ->list[str] 获取结果列表, 每行一个未去除空白的元素",
      "也可用 subprocess.getoutput().strip() ->str 获取结果字符串"
    ]
  }
}

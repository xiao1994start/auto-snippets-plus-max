{
  "pyinstaller 打包 python -> exe": {
    "prefix": ["import =pyinstaller", "pkg =pyinstaller"],
    "body": [
      "import os",
      "import shutil",
      "from pathlib import Path",
      "",
      "from PyInstaller.__main__ import run",
      "",
      "# * 要打包的入口文件",
      "app = Path(Path(__file__).parent, 'main.py')",
      "# * 打包后的文件名",
      "app_name = 'My_App'",
      "# * 打包后的图标",
      "app_icon = Path(Path(__file__).parent, 'ico.ico')",
      "",
      "command = [",
      "    f'{app}',  # * 要打包的入口文件",
      "    f'--name={app_name}',  # * 打包后的文件名",
      "    f'--icon={app_icon}',  # * 打包后的图标",
      "    '--onefile',  # 打包成一个文件",
      "    f'--workpath={Path(Path(__file__).parent,'_pyinstaller','build')}',  # 打包时临时文件存放路径",
      "    f'--distpath={Path(Path(__file__).parent,'_pyinstaller','dist')}',  # 打包后文件存放路径",
      "    f'--specpath={Path(Path(__file__).parent,'_pyinstaller')}',  # 存储生成的 .spec 文件的文件夹(默认:SPECPATH当前路径; --add-data时会影响索引路径)",
      "    '--windowed',  # 无控制台窗口",
      "    '--log-level=INFO',  # 编译时控制台信息的详细程度(默认值: INFO): TRACE | DEBUG | INFO | WARN | DEPRECATION | ERROR | FATAL",
      "    '--noconfirm',  # 覆盖输出目录中的原有内容(默认值: SPECPATH/dist/SPECNAME), 不请求确认",
      "    '--clean',  # 清理之前的打包文件",
      "    # todo 打包资源文件 --add-data=资源路径;目标路径",
      "    f'--add-data={Path(Path(__file__).parent,'utils')}{os.pathsep}utils',",
      "]",
      "",
      "",
      "if Path(Path(__file__).parent, '_pyinstaller').exists(follow_symlinks=False):",
      "    shutil.rmtree(Path(Path(__file__).parent, '_pyinstaller'))",
      "",
      "run(command)",
      "",
      "# * 打开打包后的文件夹",
      "os.startfile(Path(Path(__file__).parent, '_pyinstaller', 'dist'))",
      "",
      "print('>> 打包完成 <<')",
      ""
    ],
    "description": "pyinstaller 打包 python -> exe"
  },
  "pyinstaller 库打包python脚本exe": {
    "prefix": ["import -pyinstaller.class =pyinstaller"],
    "body": [
      "import os",
      "import shutil",
      "from pathlib import Path",
      "",
      "from PyInstaller.__main__ import run",
      "",
      "",
      "class PackMain:",
      "    def __init__(",
      "        self,",
      "        fileName: str | Path,",
      "        onefile: bool = True,",
      "        oldOneDir: bool = False,",
      "        console: bool = False,",
      "        addData: str | list[str] | None = None,",
      "        addImport: str | list[str] | None = None,",
      "        icoFile: str | None = None,",
      "        appName: str | None = None,",
      "    ) -> None:",
      "        \"\"\"",
      "        打包 python 脚本文件 -> exe执行程序",
      "        * 注意: 打包文件时需检查入口py文件中是否存在 import * 语句",
      "        * 如果存在, 则打包文件时需将 import * 语句替换成具体导入语句",
      "        * 并且, 将 import * 语句注释掉",
      "        * 否则会导致打包文件时出现错误",
      "        ! 部分警告处理方案:",
      "        1.项目中使用 NumPy 库时, 由于 numpy.array_api 还处于实验性阶段, 导致打包文件时出现如下警告:",
      "            >> UserWarning: The numpy.array_api submodule is still experimental. See NEP 47.",
      "            解决方案: 不用管",
      "        Args:",
      "            fileName (str | Path): 入口文件.py",
      "            onefile (bool, optional): 单文件打包. Defaults to True.",
      "            oldOneDir (bool, optional): 旧版PyInstaller单目录打包布局, 使用 . 来重新启用旧的 onedir 布局(相对于 .spec 文件路径), 但不包含内容目录. Defaults to False.",
      "            console (bool, optional): 控制台窗口显示模式. Defaults to False.",
      "            addData (str | list[str] | None, optional): 添加数据文件, 注意: 添加数据文件时, 默认索引路径为: .spec 所在路径; 可以使用 self.base_dir 指定文件索引路径. Defaults to None.",
      "            icoFile (str | None, optional): 图标文件.ico. Defaults to None.",
      "            appName (str | None, optional): 打包文件名称. Defaults to \"mainApp\".",
      "        \"\"\"",
      "        self.base_dir = Path(__file__).parent.resolve()",
      "        # 入口文件路径",
      "        self.file_name = fileName",
      "        self.file_path = Path(self.base_dir, self.file_name)",
      "        # 打包时临时文件存放路径",
      "        self.out_path = Path(self.base_dir, \"_pyinstaller\")",
      "        # 打包后文件存放路径",
      "        self.out_path_build = Path(self.out_path, \"build\")",
      "        # 存储生成的 .spec 文件的文件夹(默认:SPECPATH当前路径; --add-data时会影响索引路径)",
      "        self.out_path_dist = Path(self.out_path, \"dist\")",
      "        # 打包模式",
      "        self.onefile = onefile",
      "        # 旧版PyInstaller单目录打包布局",
      "        self.old_one_dir = oldOneDir",
      "        # 控制台窗口",
      "        self.console = console",
      "        # 添加数据文件",
      "        self.add_data = addData",
      "        # 添加打包时导入的模块",
      "        self.add_import = addImport",
      "        # 图标文件",
      "        self.ico_file = icoFile",
      "        # 打包文件名称",
      "        self.app_name = appName",
      "        # * 初始化运行环境",
      "        self.init_out()",
      "        self._build()",
      "        self._openOutDist()",
      "",
      "    # * Class Function: 执行打包命令",
      "    def _build(self):",
      "        run(self.init_commant())",
      "",
      "    # * Class Function: 打开输出文件夹",
      "    def _openOutDist(self):",
      "        os.startfile(self.out_path_dist)",
      "",
      "    # * Class Function: 初始化输出文件夹",
      "    def init_out(self):",
      "        if self.out_path.exists():",
      "            shutil.rmtree(self.out_path)",
      "",
      "    # * Class Function: 初始化pyinstaller命令列表",
      "    def init_commant(self):",
      "        main_file = str(self.file_path)",
      "        workpath = str(self.out_path_build)",
      "        distpath = str(self.out_path_dist)",
      "        specpath = str(self.out_path)",
      "        command_list = [",
      "            main_file,",
      "            f\"--workpath={workpath}\",  # 打包时临时文件存放路径",
      "            f\"--distpath={distpath}\",  # 打包后文件存放路径",
      "            f\"--specpath={specpath}\",  # 存储生成的 .spec 文件的文件夹(默认:SPECPATH当前路径; --add-data时会影响索引路径)",
      "            \"--log-level=WARN\",  # 编译时控制台信息的详细程度(默认值: INFO): TRACE | DEBUG | INFO | WARN | DEPRECATION | ERROR | FATAL",
      "            \"--noconfirm\",  # 覆盖输出目录中的原有内容(默认值: SPECPATH/dist/SPECNAME), 不请求确认",
      "            \"--clean\",  # 在构建之前, 清理 PyInstaller 缓存并删除临时文件",
      "            self.init_mode(),  # --onedir: 创建包含一个可执行文件的单文件夹捆绑包; --onefile: 创建单文件捆绑的可执行文件",
      "            self.init_oldOneDir(),  # 仅适用于 --onedir 单文件夹构建, 使用 . 来重新启用旧的 onedir 布局(相对于 .spec 文件路径), 但不包含内容目录",
      "            self.init_console(),  # --console: 显示控制台窗口(默认选项); --noconsole: 不显示控制台窗口",
      "            *self.init_addData(),  # 添加数据文件, 注意: 添加数据文件时, 默认索引路径为: .spec 所在路径",
      "            *self.init_import(),  # 添加打包时导入的模块",
      "            self.init_icon(),",
      "            self.init_name(),",
      "        ]",
      "        command_list = list(filter(None, command_list))",
      "        return command_list",
      "",
      "    # * Class Function: 打包模式初始化",
      "    def init_mode(self):",
      "        match self.onefile:",
      "            case True:",
      "                # comment: 创建单文件捆绑的可执行文件",
      "                Path(self.out_path_dist, str(self.file_name)).mkdir(parents=True, exist_ok=True)",
      "                return \"--onefile\"",
      "            case False:",
      "                # comment: 创建包含一个可执行文件的单文件夹捆绑包",
      "                return \"--onedir\"",
      "",
      "    # * Class Function: 控制台窗口显示模式",
      "    def init_console(self):",
      "        match self.console:",
      "            case True:",
      "                # comment: 显示控制台窗口",
      "                return \"--console\"",
      "            case False:",
      "                # comment: 不显示控制台窗口",
      "                return \"--noconsole\"",
      "",
      "    # * Class Function: 旧版单目录打包布局",
      "    def init_oldOneDir(self):",
      "        if self.onefile:",
      "            # comment: 单文件打包无法使用此项目",
      "            return \"\"",
      "        match self.old_one_dir:",
      "            case True:",
      "                # comment: 使用旧版单目录打包布局",
      "                return \"--contents-directory=.\"",
      "            case False:",
      "                # comment: 使用新版单目录打包布局",
      "                return \"\"",
      "",
      "    # * Class Function: 初始化添加数据",
      "    def init_addData(self):",
      "        add_data = self.add_data",
      "        if not add_data:",
      "            # comment: 打包时未指定添加数据",
      "            return \"\"",
      "        add_data_list = []",
      "        if not isinstance(add_data, list):",
      "            # comment: 打包时指定添加数据为单个数据",
      "            add_data = [add_data]",
      "        for data in add_data:",
      "            add_data_list.append(",
      "                f\"--add-data={str(Path(self.base_dir, data))}:{data}\"",
      "            )",
      "        return add_data_list",
      "",
      "    # * Class Function: 初始化导入第三方库",
      "    def init_import(self):",
      "        add_import = self.add_import",
      "        if not add_import:",
      "            # comment: 打包时未指定导入第三方库",
      "            return \"\"",
      "        add_import_list = []",
      "        if not isinstance(add_import, list):",
      "            # comment: 打包时指定导入第三方库为单个数据",
      "            add_import = [add_import]",
      "        for ip in add_import:",
      "            add_import_list.append(f\"--hidden-import={ip}\")",
      "        return add_import_list",
      "",
      "    # * Class Function: 初始化图标",
      "    def init_icon(self):",
      "        if not self.ico_file:",
      "            # comment: 打包时未指定图标文件",
      "            return \"\"",
      "        return f\"--icon={str(Path(self.base_dir, self.ico_file))}\"",
      "",
      "    # * Class Function: 初始化打包文件名称",
      "    def init_name(self):",
      "        if not self.app_name:",
      "            # comment: 打包时未指定打包文件名称",
      "            return \"\"",
      "        return f\"--name={self.app_name}\"",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    PackMain(",
      "        fileName=\"main.py\",  # 入口文件",
      "        onefile=True,  # 是否打包为单个文件; 默认: True",
      "        console=True,  # 是否打包为控制台程序; 默认: False",
      "        addData=[\"./data\"],  # 打包时添加数据文件",
      "        addImport=[\"PySide6\"],  # 打包时添加第三方库",
      "        icoFile=\"\",  # 打包时指定图标文件",
      "        appName=\"\",  # 打包时指定打包文件名称",
      "    )",
      ""
    ],
    "description": "pyinstaller 库打包python脚本exe"
  }
}

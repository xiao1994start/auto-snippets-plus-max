{
  "引入 socket 网络通讯模块": {
    "prefix": "im -socket",
    "body": ["import socket"],
    "description": ["引入 socket 网络通讯模块"]
  },
  "socket.GetLocalHostName 获取本地计算机名(IP)": {
    "prefix": "socketGetLocalHostName -socket",
    "body": ["socket.gethostbyname(socket.gethostname())"],
    "description": ["socket.GetLocalHostName 获取本地计算机名(IP)"]
  },
  "socket.socketPort 端口号相关处理": {
    "prefix": "socket=SocketPort =socket",
    "body": [
      "import random",
      "import socket",
      "",
      "",
      "class SocketPort:",
      "    # * class signal",
      "    def __init__(self) -> None:",
      "        \"\"\"",
      "        使用 socket 库获取可用端口号 | 对端口号进行随机化 | 查看端口是否被占用",
      "        \"\"\"",
      "",
      "    def port_random(self):",
      "        \"\"\"",
      "        获取一个随机可用的端口",
      "        \"\"\"",
      "        port = 8080",
      "        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:",
      "            while True:",
      "                try:",
      "                    s.bind(('localhost', port))",
      "                    print(f'>> Port {port} is available')",
      "                    break",
      "                except ConnectionRefusedError:  # ConnectionRefusedError: 连接被拒绝, 端口未被占用",
      "                    # ! 端口被占用，尝试下一个端口",
      "                    print(f'>> Port {port} 已被占用, 尝试下一个端口...')",
      "                except OSError:  # OSError: 操作系统错误",
      "                    print('>> 操作系统错误')",
      "                except Exception as error:  # Exception: 所有异常的基类, 如需对指定类型的异常进行处理, 在上方添加 except [指定异常类型] 即可",
      "                    print('错误类型: ', type(error))",
      "                    print('错误信息: ', error)",
      "                    raise error  # raise: 抛出异常, 程序终止. (如果注释掉, 则程序继续执行, 正常退出)",
      "                port = random.randint(1024, 65535)  # 随机生成端口号",
      "        return port",
      "",
      "    def port_in_use(self, port):",
      "        \"\"\"",
      "        查看端口是否被占用",
      "        \"\"\"",
      "        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:",
      "            try:",
      "                s.bind(('localhost', port))  # 尝试绑定端口",
      "                print(f'>> port {port} 可用')",
      "                return True  # 端口未被占用",
      "            except ConnectionRefusedError:  # ConnectionRefusedError: 连接被拒绝, 端口未被占用",
      "                # ! 端口被占用，尝试下一个端口",
      "                print(f'>> Port {port} 已被占用, 尝试下一个端口...')",
      "                return False  # 端口已被占用",
      "            except OSError:  # OSError: 操作系统错误",
      "                print('>> 操作系统错误')",
      "                return False  # 端口已被占用",
      ""
    ],
    "description": "socket.SocketPort 端口号相关处理"
  }
}

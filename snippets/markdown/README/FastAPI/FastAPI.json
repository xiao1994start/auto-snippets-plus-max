{
  "-FastAPIHelp": {
    "prefix": "FastAPI =markdown",
    "body": [
      "# FastAPIHelp",
      "",
      "## 构建工具",
      "",
      "```bat",
      "@REM 安装 fastapi web框架",
      "call python.exe -m pip install fastapi -i https://pypi.tuna.tsinghua.edu.cn/simple",
      "@REM 安装 uvicorn 异步服务器",
      "call python.exe -m pip install uvicorn -i https://pypi.tuna.tsinghua.edu.cn/simple",
      "@REM 安装 pydantic 数据接口定义检查与设置管理",
      "call python.exe -m pip install pydantic -i https://pypi.tuna.tsinghua.edu.cn/simple",
      "@REM 安装 pywebview webGUI框架库",
      "call python.exe -m pip install pywebview -i https://pypi.tuna.tsinghua.edu.cn/simple",
      "@REM 安装 pyinstaller 打包工具",
      "call python.exe -m pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple",
      "```",
      "",
      "### 1. ./main.py >> 入口配置:",
      "",
      "```python",
      "import os",
      "import subprocess",
      "# 引入 uvicorn->ASGI服务器",
      "import uvicorn",
      "# 引入 pywebview",
      "import webview",
      "from fastapi import FastAPI",
      "# 引入 FileResponse->定义HTML文件, RedirectResponse->定义重定向路由地址",
      "from fastapi.responses import FileResponse, RedirectResponse",
      "# 引入 StaticFiles->定义静态文件",
      "from fastapi.staticfiles import StaticFiles",
      "# 引入 子路由",
      "from apps.urls import appsAPI",
      "# 实例化",
      "app = FastAPI()",
      "# 定义静态文件的绝对路径",
      "BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # 获取当前目录的绝对路径",
      "staticFilePath = os.path.join(BASE_DIR, \"static\")",
      "if os.path.exists(staticFilePath):",
      "\t# 判断存在静态文件目录->挂载静态文件",
      "\t\"\"\"挂在静态文件",
      "",
      "\t设置参数:",
      "\t\tapp.mount(\"url路径参数\", StaticFiles(directory=\"工作目录下的静态文件\"), name=\"static\")",
      "",
      "\tHTML文件路径参数修改",
      "\t./dist 重命名-> ./static",
      "\t./dist/index.html 将\"./\"替换成\"static/\" >>>",
      "\t\thref=\"./static/assets/svg_css/*.svg_css\" -> href=\"static/static/assets/svg_css/*.svg_css\"",
      "\t\tsrc=\"./static/assets/js/index-_0ISTUs5.js\" -> src=\"static/static/assets/js/*.js\"",
      "\t\"\"\"",
      "\t# 挂载静态文件",
      "\tapp.mount(\"/\", StaticFiles(directory=staticFilePath), name=\"static\")",
      "# 路由分发",
      "app.include_router(",
      "\tappsAPI, prefix=\"/api\", tags=[\"get后端数据 | post文件操作命令\"]",
      ")  # prefix=\"router路由地址前缀\"",
      "@app.get(",
      "\t\"/\",",
      "\ttags=[\"tags: 前端_HTML 接口\"],",
      "\tsummary=\"summary: 前端_HTML 接口\",",
      "\tdescription=\"description: 用于路由到测试地址_打包的HTML文件(可以直接在函数内添加注释)\",",
      "\tresponse_description=\"response_description: 响应的数据内容介绍注解\",",
      "\tdeprecated=False,  # 是否废弃接口",
      ")",
      "async def index():",
      "\t\"\"\"_首页_\"\"\"",
      "\tvueDev = RedirectResponse(",
      "\t\turl=\"http://localhost:[port]/\"",
      "\t)  # 定义开发dev重定向RedirectResponse路由",
      "\tvueHTML = FileResponse(f\"{staticFilePath}/index.html\")  # 定义打包静态文件",
      "\tif not os.path.exists(f\"{staticFilePath}/index.html\"):  # 判断不存在静态文件->调试模式",
      "\t\treturn vueDev",
      "\treturn vueHTML",
      "def dev():",
      "\t\"\"\"_开发模式_",
      "",
      "\tdev: 调试方法",
      "\t指定当前文件里的app对象->\"__main__:app\"",
      "\t\"\"\"",
      "\tuvicorn.run(\"main:app\", port=2402, reload=True)",
      "def release():",
      "\t\"\"\"_发布模式_",
      "\tpywebview:",
      "\t发布模式",
      "\t\"\"\"",
      "\t# 创建FastAPI进程(args: list[] | str, shell=True), 记录进程ID",
      "\tp = subprocess.Popen(\"uvicorn main:app --port [port]\", shell=True)",
      "\t# 创建pywebview窗口(...,",
      "\t#                       resizable=窗口是否可以调整大小_默认:True,",
      "\t#                       frameless=创建无框窗户_默认:False,",
      "\t#                       confirm_close=关闭窗口时确认_默认:False, ...)",
      "\twebview.create_window(",
      "\t\ttitle=\"便携安装\",",
      "\t\turl=\"http://127.0.0.1:[port]/\",",
      "\t\twidth=1140,",
      "\t\theight=1000,",
      "\t\tresizable=False,",
      "\t\tconfirm_close=True,",
      "\t)",
      "\t# 启动pywebview事件循环",
      "\twebview.start()",
      "\t# 关闭pywebview进程",
      "\tp.kill()",
      "if __name__ == \"__main__\":",
      "\tif not os.path.exists(f\"{staticFilePath}/index.html\"):",
      "\t\tprint(\"正在启动dev模式...\")",
      "\t\tdev()",
      "\telse:",
      "\t\tprint(\"正在启动PyWebview模式...\")",
      "\t\trelease()",
      "```",
      "",
      "******",
      "",
      "### 2. ./runServer.py >> 线程启动FastAPI服务(PyInstaller打包的主程序)",
      "",
      "```python",
      "import threading",
      "import uvicorn",
      "import webview",
      "from main import app",
      "\"\"\"防止打包服务器为单文件时出现路径错误",
      "重新封装启动文件",
      "\"\"\"",
      "# 启动FastAPI服务线程",
      "t = threading.Thread(target=uvicorn.run, args=(app,), kwargs={\"port\": [port端口]})",
      "t.daemon = True  # 添加线程守护",
      "t.start()",
      "# 在PyWebview应用程序中加载FastAPI应用程序的URL",
      "webview.create_window(",
      "\ttitle=\"FastAPI_APP\",",
      "\turl=\"http://127.0.0.1:[port端口]/\",",
      "\twidth=窗口宽度,",
      "\theight=窗口高度,",
      "\tresizable=False,  # 窗口是否可以调整大小_默认:True",
      "\tframeless=False,  # 创建无框窗户_默认:False",
      "\tconfirm_close=False,  # 关闭窗口时确认_默认:False",
      ")",
      "webview.start()",
      "```",
      "",
      "******",
      "",
      "### 3. ./build.py >> 打包runServer.py为可执行文件:",
      "",
      "``` python",
      "import os",
      "import shutil",
      "from PyInstaller import __main__ as build",
      "# 删除 build, dist 目录和 *.spec 文件",
      "if os.path.exists(\"./build\"):",
      "\tshutil.rmtree(\"./build\")",
      "if os.path.exists(\"./dist\"):",
      "\tshutil.rmtree(\"./dist\")",
      "if os.path.exists(f'./{\"runServer\" + \".spec\"}'):",
      "\tos.remove(f'./{\"runServer\" + \".spec\" }')",
      "# 执行打包",
      "if __name__ == \"__main__\":",
      "\tbuild.run(",
      "\t\t[",
      "\t\t\t# 入口文件",
      "\t\t\t\"runServer.py\",",
      "\t\t\t\"-F\",  # -F:创建一个绑定的可执行文件(单文件打包_小项目), -D:创建一个包含可执行文件的单文件夹包(默认情况下_大项目)",
      "\t\t\t# 每次打包前, 清除 build 和 dist 目录",
      "\t\t\t\"--uac-admin\",  # 需求管理员权限",
      "\t\t\t\"--clean\",",
      "\t\t\t# 无需用户确认",
      "\t\t\t\"--noconfirm\",",
      "\t\t\t# --add-data: 要添加到应用程序中的附加数据文件或包含数据文件的目录",
      "\t\t\t# 示例:\"source:dest_dir\"",
      "\t\t\t#     source 是要收集的文件（或目录）的路径",
      "\t\t\t#     dest_dir 是相对于应用程序顶层目录的目标目录",
      "\t\t\t#     两个路径之间用冒号（:）分隔",
      "\t\t\t#     要将文件放入应用程序顶层目录, 使用 . 作为 dest_dir 该选项可多次使用",
      "\t\t\t\"--add-data\",",
      "\t\t\t\"static:static\",  # 服务器静态文件",
      "\t\t\t# \"-w\",  # 不提供用于标准i/o的控制台窗口",
      "\t\t\t\"--icon\",  # 可执行文件的icon图标路径",
      "\t\t\t\"vite.ico\",",
      "\t\t]",
      "\t)",
      "```",
      ""
    ],
    "description": ["FastAPIHelp"]
  }
}

{
  "axios.API配置": {
    "prefix": ["axios -API"],
    "body": [
      "import axios from \"axios\";",
      "/**",
      "vue 中的引用方法:",
      ">>  1.导包",
      "import { ref, onMounted } from 'vue';",
      "import { get, post } from \"../api/axiosAPI\";",
      ">>  2.定义接收返回数据的容器_初始化",
      "const obj = ref<string>('')",
      ">>  3.生命周期中(在组件挂载后执行异步get_赋值obj)",
      "onMounted(async () => {",
      "\tawait get().then((res) => {",
      "\t\tconsole.log(\">>\", res);",
      "\t\tobj.value = res.data;",
      "  })",
      "})",
      ">>  4.异步post定义常量func, 在 @click=\"func\" 等情况执行",
      "const func = async () => {",
      "\tawait post({ params: params }) // 调用POST接口({传入params数据})",
      "\t\t.then((res) => {  // .then接收返回数据",
      "\t\t\tconsole.log(\">>\", res);",
      "\t\t})",
      "}",
      "*/",
      "// 拦截器设置(直接配置axios, 可以不用 axios.create({}) 实例化)",
      "axios.interceptors.request.use(config => { // 添加请求拦截器",
      "\t\t// 在发送请求之前做些什么",
      "\t\tconfig.url = '/api'; // 代理跨域_直接设置api地址",
      "\t\tconfig.headers[\"Content-Type\"] = \"application/json\"; // 请求数据类型",
      "\t\treturn config;",
      "}, error => {",
      "\t\t// 在发送请求之前做些什么",
      "\t\treturn Promise.reject(error);",
      "});",
      "axios.interceptors.response.use(response => { // 添加响应拦截器",
      "\t\t// 对响应数据做点什么",
      "\t\treturn response.data; // .data直接返回data数据_[返回数据list, 根据需要添加数据索引]",
      "}, error => {",
      "\t\t// 对响应错误做点什么",
      "\t\treturn Promise.reject(error);",
      "});",
      "",
      "interface iRes<T = any> { // 自定义返回数据类型(可以单独封装)",
      "\t\tname: string; // 定义 数据名称: 数据类型",
      "\t\tdata?: T; // ? 表示可选属性, T 表示泛型(<T = any>可以省略, 直接使用<T>)",
      "}",
      "export const get = () => { // 封装GET请求_并导出",
      "\t\treturn axios.get<any, iRes<string>>('/') // 规定返回数据格式(.then处理在调用函数的时候进行_避免无法获取返回数据)",
      "}",
      "",
      "interface iReq<T = any> { // 自定义请求数据类型(可以单独封装)",
      "\t\tname: string; // 定义 数据名称: 数据类型",
      "\t\tdata?: T; ? 表示可选属性, T 表示泛型(<T = any>可以省略, 直接使用<T>)",
      "}",
      "export const post = (params: iReq) => { // 封装POST请求_并导出(params定义post参数类型)",
      "\t\treturn axios.post<any, iRes<string>>('/', params) // 规定返回数据格式(传入params数据)",
      "}",
      ""
    ],
    "description": ["axios.API配置"]
  }
}

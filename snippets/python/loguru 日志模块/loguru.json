{
  "引入 loguru 日志库": {
    "prefix": ["import -loguru =loguru"],
    "body": [
      "from pathlib import Path",
      "",
      "from loguru import logger",
      "",
      "",
      "class Log:",
      "    def __init__(",
      "        self,",
      "        base_dir: str | Path = Path(__file__).parent.resolve(),",
      "        log_dir: str = \"./Log\",",
      "        log_file: str = \"Log.log\",",
      "        log_level: str = \"DEBUG\",",
      "        log_rotate: str = \"10 MB\",",
      "        log_retention: str = \"7 days\",",
      "        log_compression: str | None = None,",
      "    ) -> None:",
      "        \"\"\"",
      "        初始化 Logger 对象参数",
      "        参考 官网:https://loguru.readthedocs.io/en/stable/index.html",
      "        参考 中文博客:https://www.cnblogs.com/struggleMan/p/17510494.html",
      "        参考 CSDN:https://kangyucheng.blog.csdn.net/article/details/112793506",
      "        参考 CSDN:https://blog.csdn.net/Kangyucheng/article/details/112794185",
      "        Args:",
      "            log_dir (str, optional): 日志输出目录. Defaults to \"./Log\".",
      "            log_file (str, optional): 日志输出文件. Defaults to \"Log.log\".",
      "            log_level (str, optional): 日志输出等级. Defaults to \"DEBUG\".",
      "            log_rotate (str, optional): 日志输出文件时滚动方法(\"10 MB\" or \"00:00\" or \"1 week\" or \"10h\" or \"monthly\" or \"sunday\" or \"w0\" or \"monday at 12:00\" or \"1 month 2 weeks\"). Defaults to \"1 MB\".",
      "            log_retention (str, optional): 日志输出文件保留时间(\"7 days\"or \"1 week\"). Defaults to \"7 days\".",
      "            self.log_compression (str | None, optional): 压缩日志文件(None:不压缩; 压缩:\"gz\"|\"bz2\"|\"xz\"|\"lzma\"|\"tar\"|\"tar.gz\"|\"tar.bz2\"| \"tar.xz\"|\"zip\"). Defaults to None.",
      "        \"\"\"",
      "        # ! 定义 logger 对象",
      "        self.log = logger",
      "        # * 创建日志文件夹 & 日志文件 & 配置日志输出 参数",
      "        self.base_dir = base_dir",
      "        self.log_file = log_dir",
      "        self.log_dir = Path(self.base_dir, self.log_file)",
      "        if not self.log_dir.exists():",
      "            self.log_dir.mkdir(parents=True, exist_ok=True)",
      "        self.log_file = log_file",
      "        self.log_path = Path(self.log_dir, self.log_file)",
      "        self.log_level = log_level",
      "        self.log_rotate = log_rotate",
      "        self.log_retention = log_retention",
      "        self.log_compression = log_compression",
      "",
      "    # * Class Function: 日志输出",
      "    def Out(self, mode: str | int | None | bool = 0):",
      "        \"\"\"",
      "        日志输出模式选择",
      "",
      "        Args:",
      "            mode (str | int | None | bool, optional): 日志输出控制台:[0, \"console\", \"print\", None, False]. Defaults to 0.",
      "",
      "        Returns",
      "            Logger: 日志输出控制台 或者 文件",

      "        \"\"\"",
      "        if mode in [0, \"console\", \"print\", None, False]:  # 日志输出控制台",
      "            # todo 配置 logger.add",
      "            self.log.add",
      "            return self.log",
      "        else:  # 日志输出文件",
      "            # todo 配置 logger.add",
      "            self.log.add(",
      "                sink=self.log_path,",
      "                level=self.log_level,",
      "                rotation=self.log_rotate,",
      "                retention=self.log_retention,",
      "                compression=self.log_compression,  # 压缩文件节省空间",
      "                colorize=True,  # 漂亮的彩色日志",
      "                enqueue=True,  # 异步、线程安全、多进程安全",
      "                backtrace=True,  # 回溯",
      "                diagnose=True,  # 诊断信息,完整描述的异常信息",
      "                encoding=\"utf-8\",  # 编码",
      "            )",
      "            return self.log",
      ""
    ],
    "description": "引入 loguru 日志库"
  }
}

{
  "str 数据类型转换": {
    "prefix": ["str_"],
    "body": ["str(${1:arg})"],
    "description": ["数据类型转换->str"]
  },
  "str 类型声明": {
    "prefix": [":str"],
    "body": [": str"],
    "description": ["类型声明: str"]
  },
  "str.capitalize 首字母大写": {
    "prefix": ["str_capitalize"],
    "body": ".capitalize()",
    "description": ["str.capitalize 将str首字母转换为大写"]
  },
  "str.capitalize 示例1": {
    "prefix": ["str_capitalize=1"],
    "body": [
      "txt = hello, and welcome to my world.\n",
      "x = txt.capitalize()\n",
      "print(x)"
    ],
    "description": ["使用 str.capitalize 的示例1"]
  },
  "str.capitalize 示例2": {
    "prefix": ["str_capitalize=2"],
    "body": ["txt = '36 is my age.'\n", "x = txt.capitalize()\n", "print(x)"],
    "description": ["使用 str.capitalize 的示例2"]
  },
  "str.casefold 所有字符小写": {
    "prefix": ["str_casefold"],
    "body": ".casefold()",
    "description": ["str.casefold 将str所有字符均转换为小写"]
  },
  "str.casefold 示例": {
    "prefix": ["str_casefold="],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "x = txt.casefold()\n",
      "print(x)"
    ],
    "description": ["使用 str.casefold 的示例"]
  },
  "str.center 居中格式": {
    "prefix": ["str_center"],
    "body": ".center(${1:length}, ${2:character})",
    "description": ["str.center 返回居中的str"]
  },
  "str.center 示例1": {
    "prefix": ["str_center=1"],
    "body": ["txt = 'banana'\n", "x = txt.center(20)\n", "print(x)"],
    "description": ["使用 str.center 的示例1"]
  },
  "str.center 示例2": {
    "prefix": ["str_center=2"],
    "body": ["txt = 'banana'\n", "x = txt.center(20,'O')\n", "print(x)"],
    "description": ["使用 str.center 的示例2"]
  },
  "str.count 指定值计数": {
    "prefix": ["str_count"],
    "body": ".count(${1:string})",
    "description": ["str.count 返回指定值在str中出现的次数"]
  },
  "str.count 示例1": {
    "prefix": ["str_count=1"],
    "body": [
      "txt = 'I love apples, apple are my favorite fruit'\n",
      "x = txt.count('apple')\n",
      "print(x)"
    ],
    "description": ["使用 str.count 的示例1"]
  },
  "str.count 示例2": {
    "prefix": ["str_count=2"],
    "body": [
      "txt = 'I love apples, apple are my favorite fruit'\n",
      "x = txt.count('apple', 10, 24)\n",
      "print(x)"
    ],
    "description": ["使用 str.count 的示例2"]
  },
  "str.encode 编码": {
    "prefix": ["str_encode"],
    "body": ".encode($0)",
    "description": ["str.encode 返回str的编码版本"]
  },
  "str.encode 示例1": {
    "prefix": ["str_encode=1"],
    "body": ["txt = 'My name is MEØW'\n", "x = txt.encode()\n", "print()"],
    "description": ["使用 str.encode 的示例1"]
  },
  "str.encode 示例2": {
    "prefix": ["str_encode=2"],
    "body": [
      "txt = 'My name is MEØW'\n",
      "print(txt.encode(encoding='ascii',errors='backslashreplace')",
      "print(txt.encode(encoding='ascii',errors='ignore')",
      "print(txt.encode(encoding='ascii',errors='namereplace')",
      "print(txt.encode(encoding='ascii',errors='replace')",
      "print(txt.encode(encoding='ascii',errors='xmlcharrefreplace')",
      "print(txt.encode(encoding='ascii',errors='strict')"
    ],
    "description": ["使用 str.encode 的示例2"]
  },
  "str.endswith 判断指定值结尾": {
    "prefix": ["str_endswith"],
    "body": ".endswith(${1:string})",
    "description": ["str.endswith 如果str以指定值结尾则返回 true"]
  },
  "str.endswith 示例1": {
    "prefix": ["str_endswith=1"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "x = txt.endswith('.')\n",
      "print(x)"
    ],
    "description": ["使用 str.endswith 的示例1"]
  },
  "str.endswith 示例2": {
    "prefix": ["str_endswith=2"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "x = txt.endswith('my world.', 5, 11)\n",
      "print(x)"
    ],
    "description": ["使用 str.endswith 的示例2"]
  },
  "str.expandtabs 制表符": {
    "prefix": ["str_expandtabs"],
    "body": ".expandtabs(${1:number})",
    "description": ["str.expandtabs 设置str的制表符(tabsize=)大小"]
  },
  "str.expandtabs 示例1": {
    "prefix": ["str_expandtabs=1"],
    "body": ["txt = 'H\te\tl\tl\to'\n", "x = txt.expandtabs(2)\n", "print(x)"],
    "description": ["使用 str.expandtabs 的示例1"]
  },
  "str.expandtabs 示例2": {
    "prefix": ["str_expandtabs=2"],
    "body": [
      "txt = 'H\te\tl\tl\to'\n",
      "print(txt)",
      "print(txt.expandtabs())",
      "print(txt.expandtabs(2))",
      "print(txt.expandtabs(4))",
      "print(txt.expandtabs(10))"
    ],
    "description": ["使用 str.expandtabs 的示例2"]
  },
  "str.find 搜索指定值": {
    "prefix": ["str_find"],
    "body": ".find(${1:string})",
    "description": ["str.find 在str中搜索指定值并返回找到它的位置"]
  },
  "str.find 示例1": {
    "prefix": ["str_find=1"],
    "body": [
      "txt = 'Hello, welcome to my world.'\n",
      "x = txt.find('welcome')\n",
      "print(x)"
    ],
    "description": ["使用 str.find 的示例1"]
  },
  "str.find 示例2": {
    "prefix": ["str_find=2"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "x = txt.find('e')\n",
      "print(x)"
    ],
    "description": ["使用 str.find 的示例2"]
  },
  "str.find 示例3": {
    "prefix": ["str_find=3"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "x = txt.find('e', 5, 10)\n",
      "print(x)"
    ],
    "description": ["使用 str.find 的示例3"]
  },
  "str.find 示例4": {
    "prefix": ["str_find=4"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "print(txt.find('q'))",
      "print(txt.index('q'))"
    ],
    "description": ["使用 str.find 的示例4"]
  },
  "str.format 指定值的格式": {
    "prefix": ["str_format"],
    "body": ".format($0)",
    "description": ["str.format: Formats 设置str中指定值的格式"]
  },
  "str.format 示例": {
    "prefix": ["str_format="],
    "body": [
      "# default arguments",
      "print('Hello {}, your balance is {}.'.format('Adam', 230.2346))\n",
      "# positional arguments",
      "print('Hello {0}, your balance is {1}.'.format('Adam', 230.2346))\n",
      "# keyword arguments",
      "print('Hello {name}, your balance is {blc}.'.format(name='Adam', blc=230.2346))\n",
      "# mixed arguments",
      "print('Hello {0}, your balance is {blc}.'.format('Adam', blc=230.2346))"
    ],
    "description": ["使用 str.format 的示例"]
  },
  "str.format_map 指定值的格式": {
    "prefix": ["str_format_map"],
    "body": ".format_map($0)",
    "description": ["str.format_map: Formats 设置str中指定值的格式"]
  },
  "str.format_map 示例": {
    "prefix": ["str_format_map="],
    "body": [
      "point = {'x':4,'y':-5}",
      "print('{x} {y}'.format_map(point))\n",
      "point = {'x':4,'y':-5, 'z': 0}",
      "print('{x} {y} {z}'.format_map(point))"
    ],
    "description": ["使用 str.format_map 的示例"]
  },
  "str.index 获取索引": {
    "prefix": ["str_index"],
    "body": ".index(${1:string})",
    "description": ["str.index 在str中搜索指定值并返回找到它的位置"]
  },
  "str.index 示例1": {
    "prefix": ["str_index=1"],
    "body": [
      "txt = 'Hello, welcome to my world.'\n",
      "x = txt.index('welcome')\n",
      "print(x)"
    ],
    "description": ["使用 str.index 的示例1"]
  },
  "str.index 示例2": {
    "prefix": ["str_index=2"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "x = txt.index('e')\n",
      "print(x)"
    ],
    "description": ["使用 str.index 的示例2"]
  },
  "str.index 示例3": {
    "prefix": ["str_index=3"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "x = txt.index('e', 5, 10)\n",
      "print(x)"
    ],
    "description": ["使用 str.index 的示例3"]
  },
  "str.index 示例4": {
    "prefix": ["str_index=4"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'\n",
      "print(txt.find('q'))",
      "print(txt.index('q'))"
    ],
    "description": ["使用 str.index 的示例4"]
  },
  "str.isalnum 判断字母和数字": {
    "prefix": ["str_isalnum"],
    "body": ".isalnum()",
    "description": [
      "str.isalnum 如果str中的所有字符都是字母和数字, 则返回 True"
    ]
  },
  "str.isalnum 示例1": {
    "prefix": ["str_isalnum=1"],
    "body": ["txt = 'Company12'", "x = txt.isalnum()", "print(x)"],
    "description": ["使用 str.isalnum 的示例1"]
  },
  "str.isalnum 示例2": {
    "prefix": ["str_isalnum=2"],
    "body": ["txt = 'Company 12'", "x = txt.isalnum()", "print(x)"],
    "description": ["使用 str.isalnum 的示例2"]
  },
  "str.isalpha 判断只由字母组成": {
    "prefix": ["str_isalpha"],
    "body": ".isalpha()",
    "description": [
      "str.isalpha 如果str中的所有字符都只由字母组成, 则返回 True"
    ]
  },
  "str.isalpha 示例": {
    "prefix": ["str_isalpha=str"],
    "body": ["txt = 'Company10'", "x = txt.isalpha()", "print(x)"],
    "description": ["使用 str.isalpha 的示例"]
  },
  "str.isascii 判断ASCII编码": {
    "prefix": ["str_isascii"],
    "body": ".isascii()",
    "description": [
      "str.isascii 如果为空或所有字符均为 ASCII, 则返回 True (python 3.7 中的新功能)"
    ]
  },
  "str.isdecimal 判断数学运算类型": {
    "prefix": ["str_isdecimal"],
    "body": ".isdecimal()",
    "description": [
      "str.isdecimal 如果str中的所有字符都是数学运算类型(十进制+可运算+小数), 则返回 True"
    ]
  },
  "str.isdecimal 示例1": {
    "prefix": ["str_isdecimal=1"],
    "body": [
      "txt = '\u0033' #unicode for 3",
      "x = txt.isdecimal()",
      "print(x)"
    ],
    "description": ["使用 str.isdecimal 的示例1"]
  },
  "str.isdecimal 示例2": {
    "prefix": ["str_isdecimal=2"],
    "body": [
      "a = '\u0030' #unicode for 0",
      "b = '\u0047' #unicode for G",
      "print(a.isdecimal())",
      "print(b.isdecimal())"
    ],
    "description": ["使用 str.isdecimal 的示例2"]
  },
  "str.isdigit 判断只由数学数字组成": {
    "prefix": ["str_isdigit"],
    "body": ".isdigit()",
    "description": [
      "str.isdigit 如果str中的所有字符只由数字组成, 只对0和正数有效, 则返回 True"
    ]
  },
  "str.isdigit 示例1": {
    "prefix": ["str_isdigit=1"],
    "body": ["txt = '50800'", "x = txt.isdigit()", "print(x)"],
    "description": ["使用 str.isdigit 的示例1"]
  },
  "str.isdigit 示例2": {
    "prefix": ["str_isdigit=2"],
    "body": [
      "a = '\u0030' #unicode for 0",
      "b = '\u00B2' #unicode for ²",
      "print(a.isdigit())",
      "print(b.isdigit())"
    ],
    "description": ["使用 str.isdigit 的示例2"]
  },
  "str.isidentifier 判断有效标识符": {
    "prefix": ["str_isidentifier"],
    "body": ".isidentifier()",
    "description": ["str.isidentifier 如果str是有效标识符, 则返回 True"]
  },
  "str.isidentifier 示例1": {
    "prefix": ["str_isidentifier=1"],
    "body": ["txt = 'py'", "x = txt.isidentifier()", "print(x)"],
    "description": ["使用 str.isidentifier 的示例1"]
  },
  "str.isidentifier 示例2": {
    "prefix": ["str_isidentifier=2"],
    "body": [
      "a = 'MyFolder'",
      "b = 'py002'",
      "c = '2bring'",
      "d = 'my py'",
      "print(a.isidentifier())",
      "print(b.isidentifier())",
      "print(c.isidentifier())",
      "print(d.isidentifier())"
    ],
    "description": ["使用 str.isidentifier 的示例2"]
  },
  "str.islower 判断字符(字母)均为小写": {
    "prefix": ["str_islower"],
    "body": ".islower()",
    "description": [
      "str.islower 如果str中的所有字符(字母)均为小写, 则返回 True"
    ]
  },
  "str.islower 示例1": {
    "prefix": ["str_islower=1"],
    "body": ["txt = 'hello world!'", "x = txt.islower()", "print(x)"],
    "description": ["使用 str.islower 的示例1"]
  },
  "str.islower 示例2": {
    "prefix": ["str_islower=2"],
    "body": [
      "a = 'Hello world!'",
      "b = 'hello 123'",
      "c = 'mynameisPeter'",
      "print(a.islower())",
      "print(b.islower())",
      "print(c.islower())"
    ],
    "description": ["使用 str.islower 的示例2"]
  },
  "str.isnumeric 判断只由数字组成": {
    "prefix": ["str_isnumeric"],
    "body": ".isnumeric()",
    "description": [
      "str.isnumeric 如果str中的所有字符只由数字组成(这种方法是只针对unicode对象), 则返回 True"
    ]
  },
  "str.isnumeric 示例1": {
    "prefix": ["str_isnumeric=1"],
    "body": ["txt = '565543'", "x = txt.isnumeric()", "print(x)"],
    "description": ["使用 str.isnumeric 的示例1"]
  },
  "str.isnumeric 示例2": {
    "prefix": ["str_isnumeric=2"],
    "body": [
      "a = '\u0030' #unicode for 0",
      "b = '\u00B2' #unicode for &sup2;",
      "c = '10km2'",
      "print(a.isnumeric())",
      "print(b.isnumeric())",
      "print(c.isnumeric())"
    ],
    "description": ["使用 str.isnumeric 的示例2"]
  },
  "str.isprintable 判断所有字符可打印": {
    "prefix": ["str_isprintable"],
    "body": ".isprintable()",
    "description": [
      "str.isprintable 如果str中的所有字符都可打印或字符串为空, 则返回 True"
    ]
  },
  "str.isprintable 示例1": {
    "prefix": ["str_isprintable=1"],
    "body": ["txt = 'Hello! Are you #1?'", "x = txt.isprintable()", "print(x)"],
    "description": ["使用 str.isprintable 的示例1"]
  },
  "str.isprintable 示例2": {
    "prefix": ["str_isprintable=2"],
    "body": [
      "txt = 'Hello!\nAre you #1?'",
      "x = txt.isprintable()",
      "print(x)"
    ],
    "description": ["使用 str.isprintable 的示例2"]
  },
  "str.isspace 判断只由空格组成": {
    "prefix": ["str_isspace"],
    "body": ".isspace()",
    "description": ["str.isspace 如果str中的所有字符都是空格, 则返回 True"]
  },
  "str.isspace 示例1": {
    "prefix": ["str_isspace=1"],
    "body": ["txt = '   '", "x = txt.isspace()", "print(x)"],
    "description": ["使用 str.isspace 的示例1"]
  },
  "str.isspace 示例2": {
    "prefix": ["str_isspace=2"],
    "body": ["txt = '   s   '", "x = txt.isspace()", "print(x)"],
    "description": ["使用 str.isspace 的示例2"]
  },
  "str.istitle 判断遵循标题规则(单词首字母大写)": {
    "prefix": ["str_istitle"],
    "body": ".istitle()",
    "description": [
      "str.istitle 如果str遵循标题规则(所有的单词拼写首字母是否为大写, 且其他字母为小写), 则返回 True"
    ]
  },
  "str.istitle 示例1": {
    "prefix": ["str_istitle=1"],
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "x = txt.istitle()",
      "print(x)"
    ],
    "description": ["使用 str.istitle 的示例1"]
  },
  "str.istitle 示例2": {
    "prefix": ["str_istitle=2"],
    "body": [
      "a = 'HELLO, AND WELCOME TO MY WORLD'",
      "b = 'Hello'",
      "c = '22 Names'",
      "d = 'This Is %'!?'",
      "print(a.istitle())",
      "print(b.istitle())",
      "print(c.istitle())",
      "print(d.istitle())"
    ],
    "description": ["使用 str.istitle 的示例2"]
  },
  "str.isUpper 判断字符(字母)均为大写": {
    "prefix": ["str_isUpper"],
    "body": ".isupper()",
    "description": ["str.isUpper 如果str中的所有字符均为大写, 则返回 True"]
  },
  "str.isupper 示例1": {
    "prefix": ["str_isupper=1"],
    "body": ["txt = 'THIS IS NOW!'", "x = txt.isupper()", "print(x)"],
    "description": ["使用 str.isupper 的示例1"]
  },
  "str.isupper 示例2": {
    "prefix": ["str_isupper=2"],
    "body": [
      "a = 'Hello World!'",
      "b = 'hello 123'",
      "c = 'MY NAME IS PETER'",
      "print(a.isupper())",
      "print(b.isupper())",
      "print(c.isupper())"
    ],
    "description": ["使用 str.isupper 的示例2"]
  },
  "str.join 拼接": {
    "prefix": ["str_join"],
    "body": ".join(${1:iterable})",
    "description": ["str.join 将可迭代的元素连接到str的末尾"]
  },
  "str.join 示例1": {
    "prefix": ["str_join=1"],
    "body": [
      "myTuple = ('John', 'Peter', 'Vicky')",
      "x = '#'.join(myTuple)",
      "print(x)"
    ],
    "description": ["使用 str.join 的示例1"]
  },
  "str.join 示例2": {
    "prefix": ["str_join=2"],
    "body": [
      "myDict = {'name': 'John', 'country': 'Norway'}",
      "mySeparator = 'TEST'",
      "x = mySeparator.join(myDict)",
      "print(x)"
    ],
    "description": ["使用 str.join 的示例2"]
  },
  "str.ljust left拼接": {
    "prefix": ["str_ljust"],
    "body": ".ljust(${1:number})",
    "description": ["str.ljust 返回str的left(左侧)拼接可迭代的元素版本"]
  },
  "str.ljust 示例1": {
    "prefix": ["str_ljust=1"],
    "body": [
      "txt = 'banana'",
      "x = txt.ljust(20)",
      "print(x, 'is my favorite fruit.')"
    ],
    "description": ["使用 str.ljust 的示例1"]
  },
  "str.ljust 示例2": {
    "prefix": ["str_ljust=2"],
    "body": ["txt = 'banana'", "x = txt.ljust(20, 'O')", "print(x)"],
    "description": ["使用 str.ljust 的示例2"]
  },
  "str.lower 转换为小写": {
    "prefix": ["str_lower"],
    "body": ".lower()",
    "description": ["str.lower 将str转换为小写"]
  },
  "str.lower 示例": {
    "prefix": ["str_lower="],
    "body": ["txt = 'Hello my FRIENDS'", "x = txt.lower()", "print(x)"],
    "description": ["使用 str.lower 的示例"]
  },
  "str.lstrip left去除空白": {
    "prefix": ["str_lstrip"],
    "body": ".lstrip(${1:' '})",
    "description": [
      "str.lstrip 返回str的left(起始/左侧)去除空白(包括\\n, \\r, \\t)版本"
    ]
  },
  "str.lstrip 示例1": {
    "prefix": ["str_lstrip=1"],
    "body": [
      "txt = '     banana     '",
      "x = txt.lstrip()",
      "print('of all fruits', x, 'is my favorite')"
    ],
    "description": ["使用 str.lstrip 的示例1"]
  },
  "str.lstrip 示例2": {
    "prefix": ["str_lstrip=2"],
    "body": [
      "txt = ',,,,,ssaaww.....banana'",
      "x = txt.lstrip(',.asw')",
      "print(x)"
    ],
    "description": ["使用 str.lstrip 的示例2"]
  },
  "str.maketrans 字符映射的转换": {
    "prefix": ["str_maketrans"],
    "body": ".maketrans(${1:字符串中要替代的字符组成的字符串}, ${2:相应的映射字符的字符串})",
    "description": [
      "str.maketrans 返回要在翻译中使用的翻译表(注: 两个字符串的长度必须相同, 为一一对应的关系)"
    ]
  },
  "str.maketrans 示例1": {
    "prefix": ["str_maketrans=1"],
    "body": [
      "# example dictionary",
      "dict = {'a': '123', 'b': '456', 'c': '789'}",
      "string = 'abc'",
      "print(str.maketrans(dict))"
    ],
    "description": ["使用 str.maketrans 的示例1"]
  },
  "str.maketrans 示例2": {
    "prefix": ["str_maketrans=2"],
    "body": [
      "# example dictionary",
      "dict = {97: '123', 98: '456', 99: '789'}",
      "string = 'abc'",
      "print(str.maketrans(dict))"
    ],
    "description": ["使用 str.maketrans 的示例2"]
  },
  "str.partition 拆分->tuple": {
    "prefix": ["str_partition"],
    "body": ".partition(${1:string})",
    "description": [
      "str.partition 返回一个分割后的str元组, 其中字符串分为三部分(包含分隔符之前的部分、分隔符本身、以及分隔符之后的部分)"
    ]
  },
  "str.partition 示例1": {
    "prefix": ["str_partition=1"],
    "body": [
      "txt = 'I could eat bananas all day'",
      "x = txt.partition('bananas')",
      "print(x)"
    ],
    "description": ["使用 str.partition 的示例1"]
  },
  "str.partition 示例2": {
    "prefix": ["str_partition=2"],
    "body": [
      "txt = 'I could eat bananas all day'",
      "x = txt.partition('apples')",
      "print(x)"
    ],
    "description": ["使用 str.partition 的示例2"]
  },
  "str.removeprefix 去除除指定的前缀": {
    "prefix": ["str_removeprefix"],
    "body": ".removeprefix(${1:prefix})",
    "description": [
      "str.removeprefix 去除开头指定的前缀, 并返回去除前缀后的新字符串. 例如: str(\"Hello, World!\").removeprefix(\"Hello, \") 返回值: \"World!\" (Python 3.9+)"
    ]
  },
  "str.removesuffix 去除指定的后缀": {
    "prefix": ["str_removesuffix"],
    "body": ".removesuffix(${1:suffix})",
    "description": [
      "str.removesuffix 去除末尾指定的后缀, 并返回删除后的新str. (suffix: 要删除的后缀, 可以是一个字符串或是一个元组, 代表多个后缀) 例如: str(\"Hello World.txt\").removesuffix(\".txt\") 返回值: \"Hello World\""
    ]
  },
  "str.replace 替换": {
    "prefix": ["str_replace"],
    "body": ".replace('${1:old}', '${2:new}')",
    "description": ["str.replace 返回指定值替换为指定值的str"]
  },
  "str.replace 示例1": {
    "prefix": ["str_replace=1"],
    "body": [
      "txt 'I like bananas'",
      "x = txt.replace('bananas', 'apples')",
      "print(x)"
    ],
    "description": ["使用 str.replace 的示例1"]
  },
  "str.replace 示例2": {
    "prefix": ["str_replace=2"],
    "body": [
      "txt = 'one one was a race horse, two two was one too.'",
      "x = txt.replace('one', 'three')",
      "print(x)"
    ],
    "description": ["使用 str.replace 的示例2"]
  },
  "str.replace 示例3": {
    "prefix": ["str_replace=3"],
    "body": [
      "txt = 'one one was a race horse, two two was one too.'",
      "x = txt.replace('one', 'three', 2)",
      "print(x)"
    ],
    "description": ["使用 str.replace 的示例3"]
  },
  "str.rfind 指定值最后位置": {
    "prefix": ["str_rfind"],
    "body": ".rfind(${1:string})",
    "description": ["str.rfind 在str中搜索指定值, 返回找到该值的最后位置"]
  },
  "str.rfind 示例1": {
    "prefix": ["str_rfind=1"],
    "body": ["txt = 'Mi casa, su casa.'", "x = txt.rfind('casa')", "print(x)"],
    "description": ["使用 str.rfind 的示例1"]
  },
  "str.rfind 示例2": {
    "prefix": ["str_rfind=2"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rfind('e')",
      "print(x)"
    ],
    "description": ["使用 str.rfind 的示例2"]
  },
  "str.rfind 示例3": {
    "prefix": ["str_rfind=3"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rfind('e', 5, 10)",
      "print(x)"
    ],
    "description": ["使用 str.rfind 的示例3"]
  },
  "str.rfind 示例4": {
    "prefix": ["str_rfind=4"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "print(txt.rfind('q'))",
      "print(txt.rindex('q'))"
    ],
    "description": ["使用 str.rfind 的示例4"]
  },
  "str.rindex 指定值最后位置索引": {
    "prefix": ["str_rindex"],
    "body": ".rindex(${1:string})",
    "description": [
      "str.rindex 在str中搜索指定值, 返回找到该值的最后位置的索引"
    ]
  },
  "str.rindex 示例1": {
    "prefix": ["str_rindex=1"],
    "body": ["txt = 'Mi casa, su casa.'", "x = txt.rindex('casa')", "print(x)"],
    "description": ["使用 str.rindex 的示例1"]
  },
  "str.rindex 示例2": {
    "prefix": ["str_rindex=2"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rindex('e')",
      "print(x)"
    ],
    "description": ["使用 str.rindex 的示例2"]
  },
  "str.rindex 示例3": {
    "prefix": ["str_rindex=3"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rindex('e', 5, 10)",
      "print(x)"
    ],
    "description": ["使用 str.rindex 的示例3"]
  },
  "str.rindex 示例4": {
    "prefix": ["str_rindex=4"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "print(txt.rfind('q'))",
      "print(txt.rindex('q'))"
    ],
    "description": ["使用 str.rindex 的示例4"]
  },
  "str.rjust 右对齐": {
    "prefix": ["str_rjust"],
    "body": ".rjust(${1:width})",
    "description": [
      "str.rjust 返回str的右对齐版本(最大width=int, 默认fillchar空格填充=\" \")"
    ]
  },
  "str.rpartition 末尾拆分": {
    "prefix": ["str_rpartition"],
    "body": ".rpartition(${1:string})",
    "description": [
      "str.rpartition 从目标str的末尾也就是右边开始搜索分割符, 返回一个元组, 其中字符串分为三部分: 第一个为分隔符左边的子串, 第二个为分隔符本身, 第三个为分隔符右边的子串"
    ]
  },
  "str.rpartition 示例1": {
    "prefix": ["str_rpartition=1"],
    "body": [
      "txt = 'I could eat bananas all day, bananas are my favorite fruit'",
      "x = txt.rpartition('bananas')",
      "print(x)"
    ],
    "description": ["使用 str.rpartition 的示例1"]
  },
  "str.rpartition 示例2": {
    "prefix": ["str_rpartition=2"],
    "body": [
      "txt = 'I could eat bananas all day, bananas are my favorite fruit'",
      "x = txt.rpartition('apples')",
      "print(x)"
    ],
    "description": ["使用 str.rpartition 的示例2"]
  },
  "str.rsplit 反向分割->list": {
    "prefix": ["str_rsplit"],
    "body": ".rsplit(${1:separator}, maxsplit=-1)",
    "description": [
      "str.rsplit 返回str的right(右/末尾)分割版本, 返回一个list (maxsplit=分割次数)"
    ]
  },
  "str.rsplit 示例1": {
    "prefix": ["str_rsplit=1"],
    "body": [
      "txt = 'apple, banana, cherry'",
      "x = txt.rsplit(', ')",
      "print(x)"
    ],
    "description": ["使用 str.rsplit 的示例1"]
  },
  "str.rsplit 示例2": {
    "prefix": ["str_rsplit=2"],
    "body": [
      "txt = 'apple, banana, cherry'",
      "# setting the max parameter to 1, will return a list with 2 elements!",
      "x = txt.rsplit(', ', 1)",
      "print(x)"
    ],
    "description": ["使用 str.rsplit 的示例2"]
  },
  "str.rstrip right去除空白": {
    "prefix": ["str_rstrip"],
    "body": ".rstrip(${1:' '})",
    "description": [
      "str.rstrip 返回str的right(末尾/右侧)去除空白(包括\\n, \\r, \\t)版本"
    ]
  },
  "str.rstrip 示例": {
    "prefix": ["str_rstrip="],
    "body": [
      "txt = 'banana,,,,,ssaaww.....'",
      "x = txt.rstrip(',.asw')",
      "print(x)"
    ],
    "description": ["使用 str.rstrip 的示例"]
  },
  "str.split 分割->list": {
    "prefix": ["str_split"],
    "body": ".split(${1:separator}, maxsplit=-1)",
    "description": [
      "str.split 在指定分隔符处分割str, 并返回一个list (maxsplit=分割次数)"
    ]
  },
  "str.split 示例1": {
    "prefix": ["str_split=1"],
    "body": ["txt = 'welcome to the jungle'", "x = txt.split()", "print(x)"],
    "description": ["使用 str.split 的示例1"]
  },
  "str.split 示例2": {
    "prefix": ["str_split =2"],
    "body": [
      "txt = 'hello, my name is Peter, I am 26 years old'",
      "x = txt.split(', ')",
      "print(x)"
    ],
    "description": ["使用 str.split 的示例2"]
  },
  "str.split 示例3": {
    "prefix": ["str_split =3"],
    "body": [
      "txt = 'apple#banana#cherry#orange'",
      "x = txt.split('#')",
      "print(x)"
    ],
    "description": ["使用 str.split 的示例3"]
  },
  "str.split 示例4": {
    "prefix": ["str_split=3"],
    "body": [
      "txt = 'apple#banana#cherry#orange'",
      "# setting the max parameter to 1, will return a list with 2 elements!",
      "x = txt.split('#', 1)",
      "print(x)"
    ],
    "description": ["使用 str.split 的示例4"]
  },
  "str.splitlines 按行分割str->list": {
    "prefix": ["str_splitlines"],
    "body": ".splitlines()",
    "description": [
      "str.splitlines 在指定分隔符(\\n, \\r, \\r\\n)分割str, 并返回一个list"
    ]
  },
  "str.splitlines 示例1": {
    "prefix": ["str_splitlines=1"],
    "body": [
      "txt = 'Thank you for the music\nWelcome to the jungle'",
      "x = txt.splitlines()",
      "print(x)"
    ],
    "description": ["使用 str.splitlines 的示例1"]
  },
  "str.splitlines 示例2": {
    "prefix": ["str_splitlines=2"],
    "body": [
      "txt = 'Thank you for the music\nWelcome to the jungle'",
      "x = txt.splitlines(True)",
      "print(x)"
    ],
    "description": ["使用 str.splitlines 的示例2"]
  },
  "str.startswith 判断指定值开头": {
    "prefix": ["str_startswith"],
    "body": ".startswith(${1:string})",
    "description": ["str.startswith 如果str以指定值开头, 则返回 true"]
  },
  "str.startswith 示例1": {
    "prefix": ["str_startswith=1"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.startswith('Hello')",
      "print(x)"
    ],
    "description": ["使用 str.startswith 的示例1"]
  },
  "str.startswith 示例2": {
    "prefix": ["str_startswith=2"],
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.startswith('wel', 7, 20)",
      "print(x)"
    ],
    "description": ["使用 str.startswith 的示例2"]
  },
  "str.strip 去除空白": {
    "prefix": ["str_strip"],
    "body": ".strip(${1:' '})",
    "description": ["str.strip 返回str的开始位置和结束位置去除空白版本"]
  },
  "str.swapcase 大小写互换": {
    "prefix": ["str_swapcase"],
    "body": ".swapcase()",
    "description": [
      "str.swapcase 对str的大小写字母进行转换, 即将大写字母转换为小写字母, 小写字母会转换为大写字母"
    ]
  },
  "str.swapcase 示例": {
    "prefix": ["str_swapcase="],
    "body": [
      "txt = 'Hello My Name Is PETER'",
      "x = txt.swapcase()",
      "print(x)"
    ],
    "description": ["使用 str.swapcase 的示例"]
  },
  "str.title 标题化": {
    "prefix": ["str_title"],
    "body": ".title()",
    "description": ["返回\"标题化\"的str, 每个单词首字母大写, 其余字母小写"]
  },
  "str.title 示例1": {
    "prefix": ["str_title=1"],
    "body": ["txt = 'Welcome to my world'", "x = txt.title()", "print(x)"],
    "description": ["使用 str.title 的示例1"]
  },
  "str.title 示例2": {
    "prefix": ["str_title=2"],
    "body": ["txt = 'Welcome to my 2nd world'", "x = txt.title()", "print(x)"],
    "description": ["使用 str.title 的示例2"]
  },
  "str.title 示例3": {
    "prefix": ["str_title=3"],
    "body": ["txt = 'hello b2b2b2 and 3g3g3g'", "x = txt.title()", "print(x)"],
    "description": ["使用 str.title 的示例3"]
  },
  "str.translate 翻译映射": {
    "prefix": ["str_translate"],
    "body": ".translate(${1:translation})",
    "description": [
      "str.translate 返回翻译后的str, 翻译表为字典, 或者 字符串映射(maketrans(intab, outtab)), deletechars(默认空)=忽略去除字符串中的字符"
    ]
  },
  "str.translate 示例": {
    "prefix": ["str_translate="],
    "body": [
      "# translation table - a dictionary",
      "translation = {97: None, 98: None, 99: 105}\n",
      "string = 'abcdef'",
      "print('Original string:', string)\n",
      "# translate string",
      "print('Translated string:', str.translate(translation))"
    ],
    "description": ["使用 str.translate 的示例"]
  },
  "str.upper 转换大写": {
    "prefix": ["str_upper"],
    "body": ".upper()",
    "description": ["str.upper 将str转换为大写"]
  },
  "str.upper 示例": {
    "prefix": ["str_upper="],
    "body": ["txt = 'Hello my friends'", "x = txt.upper()", "print(x)"],
    "description": ["使用 str.upper 的示例"]
  },
  "str.zfill 返回指定长度的字符串": {
    "prefix": ["str_zfill"],
    "body": ".zfill(${1:width})",
    "description": [
      "返回指定长度的字符串, 原字符串右对齐, 前面填充0(width: int=指定填充长度)"
    ]
  },
  "str.zfill 示例": {
    "prefix": ["str_zfill="],
    "body": ["txt = '50'", "x = txt.zfill(10)", "print(x)"],
    "description": ["使用 str.zfill 的示例"]
  }
}

{
  "flet.main(page: ft.Page) 创建主界面框架函数.示例": {
    "prefix": ["ft_def_main_page=", "flet_def_main_page="],
    "body": [
      "def main(page: ft.Page):",
      "    # * 页面标题",
      "    page.title = 'Flet Counter Example'",
      "",
      "    # * 字体",
      "    page.fonts = {'字体': str('字体路径')}",
      "    page.theme = ft.Theme(font_family='字体')",
      "",
      "    # * 主题模式 (LIGHT: 浅色, DARK: 深色, SYSTEM[默认]: 系统默认)",
      "    page.theme_mode = ft.ThemeMode.SYSTEM",
      "",
      "    # * 子控件[垂直]对齐方式 (START[默认]: 顶部, CENTER: 居中, END: 底部, SPACE_BETWEEN: 上下两端对齐, SPACE_AROUND: 上下两端对齐, SPACE_EVENLY: 上下两端对齐)",
      "    page.vertical_alignment = ft.MainAxisAlignment.START",
      "    # * 子控件[水平]对齐方式 (START[默认]: 左侧, CENTER: 居中, END: 右侧, STRETCH: 拉伸, BASELINE: 基线对齐)",
      "    page.horizontal_alignment = ft.CrossAxisAlignment.START",
      "",
      "    # * 页面内边距 (0[默认]: 无内边距, 10: 10px内边距)",
      "    page.padding = 0",
      "    # * 页面外边距 (0[默认]: 无外边距, 10: 10px外边距)",
      "    page.spacing = 0",
      "",
      "    # * 桌面应用/页面 图标 (相对路径)",
      "    # page.window.icon = 'assets/icon.png'",
      "",
      "    # * 桌面应用/页面 对齐方式(初始位置) [ft.Alignment: 居中:(0,0); 左上:(-1, -1); 右下:(1, 1)]",
      "    page.window.alignment = ft.Alignment(0, 0)",
      "",
      "    # * 桌面应用/页面 宽度 | 高度",
      "    page.window.width = 1280",
      "    page.window.height = 720",
      "    # * 桌面应用/页面 最小宽度 | 最小高度",
      "    page.window.min_width = 1280",
      "    page.window.min_height = 720",
      "",
      ""
    ],
    "description": ["flet.main(page: ft.Page) 创建主界面框架函数.示例"]
  },
  "flet.page.theme_mode.button Flet主题按钮.示例": {
    "prefix": ["ft_def_theme_mod_button=", "flet_def_theme_mod_button="],
    "body": [
      "def theme_button():",
      "    \"\"\"",
      "    通过 darkdetect 检测系统主题,设置主题切换按钮  # ! import darkdetect  # * 引入 darkdetect 检测系统主题",
      "    \"\"\"",
      "    is_dark = darkdetect.isDark()",
      "    if is_dark:",
      "        # 当前系统: 暗黑模式",
      "        ico = ft.Icons.DARK_MODE",
      "        selected_ico = ft.Icons.LIGHT_MODE",
      "    else:",
      "        # 当前系统: 浅色模式",
      "        ico = ft.Icons.LIGHT_MODE",
      "        selected_ico = ft.Icons.DARK_MODE",
      "    theme_btn = ft.IconButton(icon=ico, selected_icon=selected_ico, on_click=lambda e: toggle_theme(e, page))",
      "    return theme_btn",
      "",
      "def toggle_theme(e, page):",
      "    \"\"\"",
      "    改变主题模式  # ! import darkdetect  # * 引入 darkdetect 检测系统主题",
      "    :param e: 事件对象",
      "    :param page: 页面对象",
      "    eg.主题切换按钮:  # * [使用 ft.IconButton 中的 selected_icon 属性切换图标]",
      "        ft.IconButton(icon=ico, selected_icon=selected_ico, on_click=toggle_theme)",
      "    \"\"\"",
      "    if page.theme_mode == ft.ThemeMode.DARK:",
      "        page.theme_mode = ft.ThemeMode.LIGHT",
      "        e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "    elif page.theme_mode == ft.ThemeMode.LIGHT:",
      "        page.theme_mode = ft.ThemeMode.DARK",
      "        e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "    else:",
      "        # * page.theme_mode = ThemeMode.SYSTEM 跟随系统主题模式",
      "        is_dark = darkdetect.isDark()",
      "        if is_dark:",
      "            page.theme_mode = ft.ThemeMode.LIGHT",
      "            e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "        else:",
      "            page.theme_mode = ft.ThemeMode.DARK",
      "            e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "    # e.control.update()  # * 更新按钮状态[可使用最高级对象  page.update() 更新页面替代]",
      "    page.update()",
      ""
    ],
    "description": ["flet.page.theme_mode.button Flet主题按钮.示例"]
  },
  "flet.def_toggle_ico_button [多选]按钮切换图标.模版": {
    "prefix": ["ft_def_toggle_ico_button=", "flet_def_toggle_ico_button="],
    "body": [
      "def def_toggle_ico_button(e):",
      "    \"\"\"",
      "    按钮切换图标(按钮切换图标, 且不关联其他按钮图标, 即: [多选])",
      "    可以只更新事件对象控件",
      "    ft.IconButton 必须至少同时具有 icon(未选中状态图标) 和 selected_icon(选中状态图标) 属性, 否则无法切换图标",
      "    \"\"\"",
      "    e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "    e.control.update()  # * 更新按钮状态",
      ""
    ],
    "description": ["flet.def_toggle_ico_button [多选]按钮切换图标.模版"]
  },
  "flet.def_toggle_ico_buttons [单选]按钮切换图标.模版": {
    "prefix": ["ft_def_toggle_ico_buttons=", "flet_def_toggle_ico_buttons="],
    "body": [
      "def toggle_ico_buttons(e, page, buttons: list[ft.IconButton]):",
      "    \"\"\"",
      "    按钮切换图标(按钮切换图标, 且关联其他按钮图标, 即: 互斥[单选])",
      "    必须更新页面对象",
      "    ft.IconButton 必须至少同时具有 icon(未选中状态图标) 和 selected_icon(选中状态图标) 属性, 否则无法切换图标",
      "    :param e: 事件对象",
      "    :param page: 页面对象",
      "    :param buttons: 关联的单选按钮列表",
      "    \"\"\"",
      "    for i in buttons:  # * 遍历按钮列表",
      "        i.selected = False  # * 取消全部按钮选中状态",
      "    e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "    page.update()  # * 更新页面状态",
      ""
    ],
    "description": ["flet.def_toggle_ico_buttons [单选]按钮切换图标.模版"]
  }
}

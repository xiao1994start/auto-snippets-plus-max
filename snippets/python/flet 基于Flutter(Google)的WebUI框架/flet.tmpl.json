{
  "flet.main(page: ft.Page) 创建主界面框架函数.tmpl": {
    "prefix": ["ft_main_page=", "flet_main_page="],
    "body": [
      "def main(page: ft.Page):",
      "    # * 页面标题",
      "    page.title = '🤖Flet Counter Example'",
      "    # * 字体",
      "    page.fonts = {'HarmonyOS': str(Path(Path(__file__).parent.resolve(), './src/assets/Fonts/HarmonyOS_Sans_SC_Medium.ttf'))}",
      "    # * 定义主题方案 [字体 | 配色]",
      "    page.theme = ft.Theme(",
      "        font_family='HarmonyOS',",
      "        color_scheme=ft.ColorScheme(  # 浅色主题配色方案",
      "            primary=ft.Colors.BLACK,  # 应用界面和组件中的主要颜色[图标/按钮/标签 等界面元素或控件的颜色]",
      "        ),",
      "    )",
      "    page.dark_theme = ft.Theme(",
      "        font_family='HarmonyOS',",
      "        color_scheme=ft.ColorScheme(  # 深色主题配色方案",
      "            primary=ft.Colors.WHITE,  # 应用界面和组件中的主要颜色[图标/按钮/标签 等界面元素或控件的颜色]",
      "        ),",
      "    )",
      "    # * 主题模式 (LIGHT: 浅色, DARK: 深色, SYSTEM[默认]: 系统默认)",
      "    page.theme_mode = ft.ThemeMode.SYSTEM",
      "    # * 子控件[垂直]对齐方式 (START[默认]: 顶部, CENTER: 居中, END: 底部, SPACE_BETWEEN: 上下两端对齐, SPACE_AROUND: 上下两端对齐, SPACE_EVENLY: 上下两端对齐)",
      "    page.vertical_alignment = ft.MainAxisAlignment.START",
      "    # * 子控件[水平]对齐方式 (START[默认]: 左侧, CENTER: 居中, END: 右侧, STRETCH: 拉伸, BASELINE: 基线对齐)",
      "    page.horizontal_alignment = ft.CrossAxisAlignment.START",
      "    # * 页面内边距 (0[默认]: 无内边距, 10: 10px内边距)",
      "    page.padding = 0",
      "    # * 页面外边距 (0[默认]: 无外边距, 10: 10px外边距)",
      "    page.spacing = 0",
      "    # * 桌面应用/页面 图标 (相对路径)",
      "    # page.window.icon = 'assets/icon.png'",
      "    # * 桌面应用/页面 对齐方式(初始位置) [ft.Alignment: 居中:(0,0); 左上:(-1, -1); 右下:(1, 1)]",
      "    page.window.alignment = ft.Alignment(0, 0)",
      "    # * 桌面应用/页面 宽度 | 高度",
      "    page.window.width = 1280",
      "    page.window.height = 720",
      "    # * 桌面应用/页面 最小宽度 | 最小高度",
      "    page.window.min_width = 1280",
      "    page.window.min_height = 720",
      "",
      "    # * 构建 桌面应用/页面",
      "    page.add($0)",
      ""
    ],
    "description": ["flet.main(page: ft.Page) 创建主界面框架函数.tmpl"]
  },
  "flet.class(Container) 创建 flet 类 Container 容器控件对象": {
    "prefix": [
      "create_ft_class_Container=",
      "create_flet_class_Container=",
      "c_ft_class_Container=",
      "c_flet_class_Container="
    ],
    "body": [
      "class ${1:FletObject}(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(self,page: ft.Page) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建 flet 类 Container 容器控件对象",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类 ft.Container 容器控件对象属性 [expand=True: 拉伸]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      ""
    ],
    "description": ["flet.class(Container) 创建 flet 类 Container 容器控件对象"]
  },
  "flet.class.def.ControlEvent Flet自定义对象控件事件.tmpl": {
    "prefix": ["ft_class_def_control_event=", "flet_class_def_control_event="],
    "body": [
      "def ${1:flet_event}(self, e: ft.ControlEvent):",
      "    \"\"\"",
      "    ${2:Callback function for the event}",
      "    \"\"\"",
      "    ...",
      "    self.page.update()",
      ""
    ],
    "description": ["flet.class.def.ControlEvent Flet自定义对象控件事件.tmpl"]
  }
}

{
  "flet.app 运行 Flet 应用": {
    "prefix": ["ft_app", "flet_app"],
    "body": [
      "ft.app(",
      "    target=${1:main},  # * 运行目标[包含 page.add 的函数或类名],",
      "    use_color_emoji=True,  # * emoji表情是否使用颜色,",
      "    # view=ft.WEB_BROWSER,  # *运行模式: (默认:独立窗口, WEB_BROWSER:浏览器)",
      ")",
      ""
    ],
    "description": ["flet.app 运行 Flet 应用"]
  },
  "flet.ControlEvent Flet控件对象事件": {
    "prefix": [":ft_ControlEvent", ":flet_ControlEvent"],
    "body": [": ft.ControlEvent"],
    "description": ["flet.ControlEvent Flet控件对象事件"]
  },
  "flet.Control 父级控件对象": {
    "prefix": ["ft_Control", "flet_Control"],
    "body": ["ft.Control"],
    "description": ["flet.Control 父级控件对象"]
  },
  "flet.Container 父级容器对象": {
    "prefix": [
      "ft_Container_AlertDialog for class def",
      "flet_Container_AlertDialog for class def"
    ],
    "body": ["ft.Container"],
    "description": ["flet.Container 父级容器对象"]
  },
  "flet.Container 容器对象": {
    "prefix": ["ft_Container", "flet_Container"],
    "body": ["ft.Container(", "    content=$0,", "    expand=True,", ")"],
    "description": [
      "flet.Container 容器对象",
      "容器允许使用背景颜色和边框来装饰控件, 并使用填充/边距和对齐来定位它"
    ]
  },
  "flet.Container 容器对象.模版": {
    "prefix": ["ft_Container=", "flet_Container="],
    "body": [
      "ft.Container(  # * 容器",
      "    margin=0,  # * 外边距",
      "    padding=10,  # * 内边距",
      "    border_radius=0,  # * 边框圆角",
      "    width=100,  # * 宽度",
      "    bgcolor=ft.Colors.with_opacity(opacity=0.1, color='#000000'),  # * 背景颜色[调试]",
      "    alignment=ft.alignment.center,  # * 对齐方式",
      "    content=ft.Column(  # * [垂直]布局",
      "        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,  # * [垂直]对齐方式",
      "        horizontal_alignment=ft.CrossAxisAlignment.CENTER,  # * [水平]对齐方式",
      "        controls=[  # * [列]控件",
      "            ft.Column(  # * [垂直]布局",
      "                horizontal_alignment=ft.CrossAxisAlignment.CENTER,  # * [水平]对齐方式",
      "                controls=[",
      "                ],",
      "            ),",
      "        ],",
      "    ),",
      ")",
      ""
    ],
    "description": ["flet.Container 容器对象.模版"]
  },
  "flet.Alignment 对齐方式": {
    "prefix": ["ft_Alignment", "flet_Alignment"],
    "body": ["ft.Alignment(0, 0)"],
    "description": [
      "flet.Alignment 对齐方式",
      "[ft.Alignment: 居中:(0,0); 左上:(-1, -1); 右下:(1, 1)]"
    ]
  },
  "flet.Row 水平布局显示其子项的控件": {
    "prefix": ["ft_Row", "flet_Row"],
    "body": ["ft.Row(", "    controls=[$0],", ")"],
    "description": ["flet.Row 水平布局显示其子项的控件"]
  },
  "flet.Row_alignment Row布局[水平]对齐方式": {
    "prefix": ["ft_Row_aligment", "flet_Row_aligment"],
    "body": [
      "alignment=ft.MainAxisAlignment.${1|START,CENTER,END,SPACE_BETWEEN,SPACE_AROUND,SPACE_EVENLY|}"
    ],
    "description": [
      "flet.Row_alignment Row布局[水平]对齐方式",
      "对齐方式:",
      "START[默认]: 顶部, CENTER: 居中, END: 底部, SPACE_BETWEEN: 首尾两端对齐, SPACE_AROUND: 相等间隔不重叠对齐, SPACE_EVENLY: 相等间隔重叠对齐"
    ]
  },
  "flet.Row_vertical_alignment Row布局[垂直]对齐方式": {
    "prefix": ["ft_Row_vertical_alignment", "flet_Row_vertical_alignment"],
    "body": ["vertical_alignment=ft.CrossAxisAlignment.${1|START,CENTER,END|}"],
    "description": [
      "flet.Row_vertical_alignment Row布局[垂直]对齐方式",
      "对齐方式:",
      "START[默认]: 顶部, CENTER: 居中, END: 底部"
    ]
  },
  "flet.Row_wrap 换行": {
    "prefix": ["flet_Row_wrap", "Row_wrap_flet"],
    "body": ["wrap=True,  # * 换行"],
    "description": ["flet.Row_wrap 换行"]
  },
  "flet.Column 垂直布局显示其子项的控件": {
    "prefix": ["ft_Column", "flet_Column"],
    "body": ["ft.Column(", "    controls=[$0],", ")"],
    "description": ["flet.Column 垂直布局显示其子项的控件"]
  },
  "flet.alignment 对齐方式": {
    "prefix": ["ft_alignment", "flet_alignment"],
    "body": ["ft.alignment.${1:center}"],
    "description": [
      "flet.alignment 对齐方式",
      "bottom_center = Alignment(0, 1)",
      "bottom_left = Alignment(-1, 1)",
      "bottom_right = Alignment(1, 1)",
      "center = Alignment(0, 0)",
      "center_left = Alignment(-1, 0)",
      "center_right = Alignment(1, 0)",
      "top_center = Alignment(0, -1)",
      "top_left = Alignment(-1, -1)",
      "top_right = Alignment(1, -1)"
    ]
  },
  "flet.margin.only 仅设置一个方向的外边距": {
    "prefix": ["ft_margin_only", "flet_margin_only"],
    "body": ["ft.margin.only(${1:top=15})"],
    "description": ["flet.margin.only 仅设置一个方向的外边距"]
  },
  "flet.MainAxisAlignment Y轴(vertical_alignment|垂直)对齐": {
    "prefix": ["ft_MainAxisAlignment", "flet_MainAxisAlignment"],
    "body": ["ft.MainAxisAlignment.${1:CENTER}"],
    "description": [
      "flet.MainAxisAlignment Y轴(vertical_alignment|垂直)对齐",
      "对齐方式:",
      "START[默认]: 顶部, CENTER: 居中, END: 底部, SPACE_BETWEEN: 首尾两端对齐, SPACE_AROUND: 相等间隔对齐, SPACE_EVENLY: 等间隔对齐"
    ]
  },
  "flet.CrossAxisAlignment X轴(horizontal_alignment|水平)对齐": {
    "prefix": ["ft_CrossAxisAlignment", "flet_CrossAxisAlignment"],
    "body": ["ft.CrossAxisAlignment.${1:CENTER}"],
    "description": [
      "flet.CrossAxisAlignment X轴(horizontal_alignment|水平)对齐",
      "对齐方式:",
      "START[默认]: 左侧, CENTER: 居中, END: 右侧, STRETCH: 拉伸, BASELINE: 基线对齐"
    ]
  },
  "flet.Stack 堆叠容器": {
    "prefix": ["ft_Stack", "flet_Stack"],
    "body": ["ft.Stack(", "    controls=[],", ")"],
    "description": ["flet.Stack 堆叠容器", "用于将多个子容器堆叠在一起"]
  },
  "flet.NavigationRail 创建 NavigationRail 常驻导航栏": {
    "prefix": ["ft_NavigationRail", "flet_NavigationRail"],
    "body": [
      "ft.NavigationRail(",
      "    # expand: 自适应填充(将 NavigationRail 置于子控件中时[expand=True], 子控件会根据 NavigationRail 的宽度自适应)",
      "    expand=True,",
      "    # selected_index=0: 默认选中第一个",
      "    selected_index=0,  # 0: 默认选中[destinations]中第一个[e.control.selected_index: 当前选中控件索引]",
      "    # label_type=ft.NavigationRailLabelType.ALL: 显示所有标签",
      "    label_type=ft.NavigationRailLabelType.ALL,  # ft.NavigationRailLabelType.ALL: 显示所有标签",
      "    # min_width=72(默认): 最小宽度",
      "    min_width=72,  # 最小宽度",
      "    # min_extended_width=256(默认): 最小扩展宽度",
      "    min_extended_width=128,  # 最小扩展宽度[128: 两个汉字宽度]",
      "    # extended=None(默认): 导航栏扩展状态",
      "    extended=False,  # 导航栏扩展状态",
      "    # leading: 导航栏第一顺位控件(不参与selected_index)",
      "    # group_alignment=0.0: 导航栏控件对齐方式[-1.0: 左对齐; 0.0: 居中对齐; 1.0: 右对齐]",
      "    group_alignment=-0.9,  # 导航栏控件对齐方式[-1.0: 左/顶 对齐; 0.0: 居中对齐; 1.0: 右/底 对齐]",
      "    # destinations: 导航栏中间控件(不少于 2 个)",
      "    destinations=[  # 导航栏中间控件(不少于 2 个, selected_index: 当前选中控件索引,从 0 开始)[ft.NavigationRailDestination: 导航栏中间控件]",
      "        #  - ft.NavigationRailDestination: 导航栏中间控件[icon: 图标, selected_icon: 选中图标, label: 标签]",
      "        ft.NavigationRailDestination(icon=ft.Icons.CHAT_BUBBLE_OUTLINE_ROUNDED, selected_icon=ft.Icons.CHAT_BUBBLE_OUTLINED, label='选项一'),",
      "        ft.NavigationRailDestination(icon=ft.Icons.SETTINGS_OUTLINED, selected_icon=ft.Icons.SETTINGS, label='设置'),",
      "    ],",
      "    # on_change: 导航栏中间控件点击事件[e.control.selected_index: 当前选中控件索引]",
      "    # trailing: 导航栏最后顺位控件(不参与selected_index)",
      ")",
      ""
    ],
    "description": ["flet.NavigationRail 创建 NavigationRail 常驻导航栏"]
  },
  "flet.NavigationRailDestination 常驻导航栏(NavigationRail)内部控件": {
    "prefix": [
      "ft_NavigationRailDestination",
      "flet_NavigationRailDestination"
    ],
    "body": [
      "ft.NavigationRailDestination(",
      "    icon=ft.Icons.SETTINGS_OUTLINED,  # icon: 图标",
      "    selected_icon=ft.Icons.SETTINGS,  # selected_icon: 选中时的图标",
      "    label='设置',  # label: 标签",
      ")",
      ""
    ],
    "description": [
      "flet.NavigationRailDestination 常驻导航栏(NavigationRail)内部控件(NavigationRailDestination)对象"
    ]
  },
  "flet.Offset 控件的相对偏移": {
    "prefix": ["ft_Offset", "flet_Offset"],
    "body": ["ft.Offset(0, 0)"],
    "description": ["flet.Offset 控件的相对偏移"]
  },
  "flet.Text 文本显示控件": {
    "prefix": ["ft_Text", "flet_Text"],
    "body": ["ft.Text(value=${1:'Hello, world!'})"],
    "description": ["flet.Text 文本显示控件"]
  },
  "flet.TextField 文本输入控件": {
    "prefix": ["ft_TextField", "flet_TextField"],
    "body": [
      "ft.TextField(",
      "    label='标题',  # * 标题",
      "    value='默认值',  # * 默认值",
      "    border_color=ft.Colors.BLUE_ACCENT_400,  # * 默认状态下边框颜色",
      "    focused_border_color=ft.Colors.LIGHT_BLUE_ACCENT_400,  # * 焦点(输入)状态下边框颜色",
      "    width=320,  # * 宽度",
      "    # * 执行函数[on_blur:失去焦点时触发; on_change:发生更改时触发; on_focus:获得焦点时触发; on_submit:ENTER(回车)键时触发]",
      ")",
      ""
    ],
    "description": [
      "flet.TextField 文本输入控件",
      "文本字段允许用户使用硬件键盘或屏幕键盘输入文本"
    ]
  },
  "flet.Button 按钮(同:ElevatedButton)": {
    "prefix": ["ft_Button", "flet_Button"],
    "body": ["ft.Button($0)"],
    "description": ["flet.Button 按钮(同:ElevatedButton)"]
  },
  "flet.ElevatedButton 凸起按钮": {
    "prefix": ["ft_ElevatedButton", "flet_ElevatedButton"],
    "body": ["ft.ElevatedButton($0)"],
    "description": [
      "flet.ElevatedButton 凸起按钮",
      "ElevatedButton 有别名 Button , 可以互换使用"
    ]
  },
  "flet.IconButton 图标按钮": {
    "prefix": ["ft_IconButton", "flet_IconButton"],
    "body": [
      "ft.IconButton(icon=ft.Icons.SETTINGS_OUTLINED, content=ft.Container(${1:可替代icon属性}), selected_icon=ft.Icons.SETTINGS_ROUNDED, selected=False, icon_size=32, on_click=lambda e: print(e))"
    ],
    "description": ["flet.IconButton 图标按钮"]
  },
  "flet.e.control Flet事件属性": {
    "prefix": ["ft_e_control=", "flet_e_control="],
    "body": ["e.control.${1|selected,data|}"],
    "description": ["flet.e.control Flet事件属性"]
  },
  "flet.ThemeMode 主题模式": {
    "prefix": ["ft_ThemeMode", "flet_ThemeMode"],
    "body": ["ft.ThemeMode.${1:DARK}"],
    "description": ["flet.ThemeMode 主题模式"]
  },
  "flet.ThemeMode.SYSTEM 更随系统主题模式": {
    "prefix": ["ft_ThemeMode_SYSTEM", "flet_ThemeMode_SYSTEM"],
    "body": [
      "ft.ThemeMode.SYSTEM  # SYSTEM[默认]: 系统默认, LIGHT: 浅色, DARK: 深色"
    ],
    "description": ["flet.ThemeMode.SYSTEM 更随系统主题模式"]
  },
  "flet.Icon 使用Flet自带图标": {
    "prefix": ["ft_Icon", "flet_Icon"],
    "body": ["ft.Icon(name=${1:'settings'})"],
    "description": ["flet.Icon 使用Flet自带图标"]
  },
  "flet.Icons 使用Flet自带图标": {
    "prefix": ["ft_Icons", "flet_Icons"],
    "body": ["ft.Icons.${1:HOUSE}"],
    "description": [
      "flet.Icons 使用Flet自带图标",
      "https://gallery.flet.dev/icons-browser/"
    ]
  },
  "flet.Image 图像": {
    "prefix": ["ft_Image", "flet_Image"],
    "body": [
      "ft.Image(src='最好使用Path获取完整路径', width=32, height=32, border_radius=16)"
    ],
    "description": ["flet.Image 图像"]
  },
  "flet.Colors 颜色": {
    "prefix": ["ft_Colors", "flet_Colors"],
    "body": [
      "ft.Colors.${1|BLUE_ACCENT_400,LIGHT_BLUE_ACCENT_400,GREEN_ACCENT_400,LIGHT_GREEN_ACCENT_400|}"
    ],
    "description": ["flet.Colors 颜色"]
  },
  "flet.Colors.with_opacity 自定义颜色": {
    "prefix": ["ft_Colors_with_opacity", "flet_Colors_with_opacity"],
    "body": ["ft.Colors.with_opacity(opacity=0, color='#000000')"],
    "description": ["flet.Colors.with_opacity 自定义颜色"]
  },
  "flet.Divider 水平分割线": {
    "prefix": ["ft_Divider", "flet_Divider"],
    "body": ["ft.Divider(height=${1:1})"],
    "description": ["flet.Divider 水平分割线"]
  },
  "flet.VerticalDivider 垂直分割线": {
    "prefix": ["ft_VerticalDivider", "flet_VerticalDivider"],
    "body": ["ft.VerticalDivider(width=${1:1})"],
    "description": ["flet.VerticalDivider 垂直分割线"]
  },
  "flet.FontWeight 字体粗细属性": {
    "prefix": ["ft_FontWeight", "flet_FontWeight"],
    "body": ["ft.FontWeight.${1:NORMAL}"],
    "description": ["flet.FontWeight 字体粗细属性"]
  },
  "flet.ButtonStyle 按钮[style]样式属性": {
    "prefix": ["ft_ButtonStyle", "flet_ButtonStyle"],
    "body": ["ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=4))"],
    "description": ["flet.ButtonStyle 按钮[style]样式属性"]
  },
  "flet.BorderSide 边框[style.side属性]样式": {
    "prefix": ["ft_BorderSide", "flet_BorderSide"],
    "body": [
      "ft.BorderSide(${1:width=2, color=ft.Colors.LIGHT_GREEN_ACCENT_700})"
    ],
    "description": ["flet.BorderSide 边框[side属性]样式"]
  },
  "flet.TextStyle 文字[style.text_style]样式属性": {
    "prefix": ["ft_TextStyle", "flet_TextStyle"],
    "body": ["ft.TextStyle($0)"],
    "description": ["flet.TextStyle 文字[style.text_style]样式属性"]
  },
  "flet.ProgressRing 环形循环旋转进度指示器": {
    "prefix": ["ft_ProgressRing", "flet_ProgressRing"],
    "body": ["ft.ProgressRing()"],
    "description": ["flet.ProgressRing 环形循环旋转进度指示器"]
  },
  "flet.AlertDialog 警报(弹窗)对话框": {
    "prefix": ["ft_AlertDialog", "flet_AlertDialog"],
    "body": [
      "ft.AlertDialog(",
      "    modal=True,  # 是否可以通过单击外部区域关闭弹窗[默认:False 可通过单击外部的区域关闭对话框](modal 属性无法改变)",
      "    title=ft.Text(value='☣️', size=64),  # 弹窗标题",
      "    content=ft.Row(  # * 弹窗内容",
      "        controls=[",
      "            ft.ProgressRing(),  # 环形循环旋转进度指示器",
      "            ft.Text(value='正在处理……', size=32),",
      "        ],",
      "    ),",
      "    alignment=ft.alignment.center,  # 弹窗对齐方式",
      "    actions=[],  # 弹窗底部容器",
      "    actions_alignment=ft.MainAxisAlignment.END,  # 弹窗底部容器水平布局",
      "    on_dismiss=lambda e: print(f'弹窗关闭:{e}'),  # 关闭对话框时触发事件",
      ")",
      ""
    ],
    "description": ["flet.AlertDialog 警报(弹窗)对话框"]
  },
  "flet.AlertDialog for class def 创建AlertDialog耗时事件处理.tmpl": {
    "prefix": [
      "ft_class_def_for_AlertDialog=",
      "flet_class_def_for_AlertDialog="
    ],
    "body": [
      "def dialog_tmpl(self, e: ft.ControlEvent):",
      "    \"\"\"",
      "    AlertDialog 界面模版",
      "    :param e: ft.ControlEvent 事件对象",
      "    \"\"\"",
      "    e_control: ft.ElevatedButton = e.control  # 获取当前点击的按钮",
      "    e_control.disabled = True  # 禁用按钮",
      "    e_control.update()  # 更新按钮",
      "    dlg = ft.AlertDialog(",
      "        modal=True,  # 是否可以通过单击外部区域关闭弹窗[默认:False 可通过单击外部的区域关闭对话框](modal 属性无法改变)",
      "        title=ft.Text(value='☣️', size=64),  # 弹窗标题",
      "        content=ft.Row(  # * 弹窗内容",
      "            controls=[",
      "                ft.ProgressRing(),  # 环形循环旋转进度指示器",
      "                ft.Text(value='正在处理……', size=32),",
      "            ],",
      "        ),",
      "        alignment=ft.alignment.center,  # 弹窗对齐方式",
      "        actions=[],  # 弹窗底部容器",
      "        actions_alignment=ft.MainAxisAlignment.END,  # 弹窗底部容器水平布局",
      "        on_dismiss=lambda e: print(f'弹窗关闭事件:{e}'),  # 关闭对话框时触发事件",
      "    )",
      "    self.page.open(dlg)",
      "    # * 模拟处理耗时...",
      "",
      "    # * 更新弹窗内容并允许关闭",
      "    dlg.content = ft.Text(value='处理完毕！', size=32)",
      "    dlg.actions.append(ft.ElevatedButton(text='确定', on_click=lambda e: self.page.close(dlg)))",
      "    dlg.update()",
      "    e_control.disabled = False  # 恢复按钮可用",
      "    e_control.update()  # 更新按钮",
      ""
    ],
    "description": [
      "flet.AlertDialog for class def 创建AlertDialog耗时事件处理.tmpl"
    ]
  },
  "flet.Dropdown 下拉列表": {
    "prefix": ["ft_Dropdown", "flet_Dropdown"],
    "body": [
      "ft.Dropdown(",
      "    label='标题',  # * 标题",
      "    options=[  # * 下拉框选项(非结构性内容)",
      "        ft.DropdownOption(key='key_name', text='不设置text会直接显示key'),",
      "    ],",
      "    value='key_name',  # * 默认选中项(非结构性内容)",
      "    editable=False,  # * 禁用输入",
      "    enable_filter=False,  # * 禁用筛选(关联editable输入开关)",
      "    enable_search=False,  # * 禁用搜索(关联editable输入开关)",
      "    border_color=ft.Colors.BLUE_ACCENT_400,  # * 默认状态下边框颜色",
      "    focused_border_color=ft.Colors.LIGHT_BLUE_ACCENT_400,  # * 焦点(输入)状态下边框颜色",
      "    width=320,",
      "    on_change=lambda e: print(e),  # * e: ft.ControlEvent",
      ")",
      ""
    ],
    "description": ["flet.Dropdown 下拉列表"]
  },
  "flet.DropdownOption 下拉框选项": {
    "prefix": ["ft_object", "flet_object"],
    "body": [
      "ft.DropdownOption(key='key_name', text='不设置text会直接显示key'),"
    ],
    "description": ["flet.DropdownOption 下拉框选项"]
  },
  "flet.DropdownM2 下拉列表M2样式": {
    "prefix": ["ft_DropdownM2", "flet_DropdownM2"],
    "body": [
      "ft.DropdownM2(",
      "    label='服务器',  # * 标题",
      "    options=[  # * 下拉框选项(非结构性内容)",
      "        ft.dropdownm2.Option(key='key_name', text='不设置text会直接显示key'),",
      "    ],",
      "    value='key_name',  # * 默认选中项(非结构性内容)",
      "    border_color=ft.Colors.BLUE_ACCENT_400,  # * 默认状态下边框颜色",
      "    focused_border_color=ft.Colors.LIGHT_BLUE_ACCENT_400,  # * 焦点(输入)状态下边框颜色",
      "    width=320,",
      "    on_change=lambda e: self.get_api(e),  # * e: ft.ControlEvent",
      ")",
      ""
    ],
    "description": ["flet.DropdownM2 下拉列表M2样式"]
  }
}

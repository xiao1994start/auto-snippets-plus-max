{
  "pip.FastAPI 网络API接口后端库": {
    "prefix": ["pip fastapi"],
    "body": [
      "@REM 安装 fastapi web框架",
      "pip install -U fastapi uvicorn pydantic pywebview pyinstaller -i https://mirrors.aliyun.com/pypi/simple/",
      "@REM 安装 uvicorn 异步服务器",
      "@REM 安装 pydantic 数据接口定义检查与设置管理",
      "@REM 安装 pywebview webGUI框架库",
      "@REM 安装 pyinstaller 打包工具",
      "",
      "goto :FastAPIHelp",
      "{./main.py >> 入口配置:",
      "    import os",
      "    import subprocess",
      "    # 引入 uvicorn->ASGI服务器",
      "    import uvicorn",
      "    # 引入 pywebview",
      "    import webview",
      "    from fastapi import FastAPI",
      "    # 引入 FileResponse->定义HTML文件, RedirectResponse->定义重定向路由地址",
      "    from fastapi.responses import FileResponse, RedirectResponse",
      "    # 引入 StaticFiles->定义静态文件",
      "    from fastapi.staticfiles import StaticFiles",
      "    # 引入 子路由",
      "    from apps.urls import appsAPI",
      "    # 实例化",
      "    app = FastAPI()",
      "    # 定义静态文件的绝对路径",
      "    BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # 获取当前目录的绝对路径",
      "    staticFilePath = os.path.join(BASE_DIR, \"static\")",
      "    if os.path.exists(staticFilePath):",
      "        # 判断存在静态文件目录->挂载静态文件",
      "        \"\"\"挂在静态文件",
      "",
      "        设置参数:",
      "            app.mount(\"url路径参数\", StaticFiles(directory=\"工作目录下的静态文件\"), name=\"static\")",
      "",
      "        HTML文件路径参数修改",
      "        ./dist 重命名-> ./static",
      "        ./dist/index.html 将\"./\"替换成\"static/\" >>>",
      "            href=\"./static/assets/svg_css/*.svg_css\" -> href=\"static/static/assets/svg_css/*.svg_css\"",
      "            src=\"./static/assets/js/index-_0ISTUs5.js\" -> src=\"static/static/assets/js/*.js\"",
      "        \"\"\"",
      "        # 挂载静态文件",
      "        app.mount(\"/\", StaticFiles(directory=staticFilePath), name=\"static\")",
      "    # 路由分发",
      "    app.include_router(",
      "        appsAPI, prefix=\"/api\", tags=[\"get后端数据 ^| post文件操作命令\"]",
      "    )  # prefix=\"router路由地址前缀\"",
      "    @app.get(",
      "        \"/\",",
      "        tags=[\"tags: 前端_HTML 接口\"],",
      "        summary=\"summary: 前端_HTML 接口\",",
      "        description=\"description: 用于路由到测试地址_打包的HTML文件(可以直接在函数内添加注释)\",",
      "        response_description=\"response_description: 响应的数据内容介绍注解\",",
      "        deprecated=False,  # 是否废弃接口",
      "    )",
      "    async def index():",
      "        \"\"\"_首页_\"\"\"",
      "        vueDev = RedirectResponse(",
      "            url=\"http://localhost:[port]/\"",
      "        )  # 定义开发dev重定向RedirectResponse路由",
      "        vueHTML = FileResponse(f\"{staticFilePath}/index.html\")  # 定义打包静态文件",
      "        if not os.path.exists(f\"{staticFilePath}/index.html\"):  # 判断不存在静态文件->调试模式",
      "            return vueDev",
      "        return vueHTML",
      "    def dev():",
      "        \"\"\"_开发模式_",
      "",
      "        dev: 调试方法",
      "        指定当前文件里的app对象->\"__main__:app\"",
      "        \"\"\"",
      "        uvicorn.run(\"main:app\", port=2402, reload=True)",
      "    def release():",
      "        \"\"\"_发布模式_",
      "        pywebview:",
      "        发布模式",
      "        \"\"\"",
      "        # 创建FastAPI进程(args: list[] ^| str, shell=True), 记录进程ID",
      "        p = subprocess.Popen(\"uvicorn main:app --port [port]\", shell=True)",
      "        # 创建pywebview窗口(...,",
      "        #                       resizable=窗口是否可以调整大小_默认:True,",
      "        #                       frameless=创建无框窗户_默认:False,",
      "        #                       confirm_close=关闭窗口时确认_默认:False, ...)",
      "        webview.create_window(",
      "            title=\"便携安装\",",
      "            url=\"http://127.0.0.1:[port]/\",",
      "            width=1140,",
      "            height=1000,",
      "            resizable=False,",
      "            confirm_close=True,",
      "        )",
      "        # 启动pywebview事件循环",
      "        webview.start()",
      "        # 关闭pywebview进程",
      "        p.kill()",
      "    if __name__ == \"__main__\":",
      "        if not os.path.exists(f\"{staticFilePath}/index.html\"):",
      "            print(\"正在启动dev模式...\")",
      "            dev()",
      "        else:",
      "            print(\"正在启动PyWebview模式...\")",
      "            release()",
      "},",
      "{./runServer.py >> 线程启动FastAPI服务(PyInstaller打包的主程序):",
      "    import threading",
      "    import uvicorn",
      "    import webview",
      "    from main import app",
      "    \"\"\"防止打包服务器为单文件时出现路径错误",
      "    重新封装启动文件",
      "    \"\"\"",
      "    # 启动FastAPI服务线程",
      "    t = threading.Thread(target=uvicorn.run, args=(app,), kwargs={\"port\": [port端口]})",
      "    t.daemon = True  # 添加线程守护",
      "    t.start()",
      "    # 在PyWebview应用程序中加载FastAPI应用程序的URL",
      "    webview.create_window(",
      "        title=\"FastAPI_APP\",",
      "        url=\"http://127.0.0.1:[port端口]/\",",
      "        width=窗口宽度,",
      "        height=窗口高度,",
      "        resizable=False,  # 窗口是否可以调整大小_默认:True",
      "        frameless=False,  # 创建无框窗户_默认:False",
      "        confirm_close=False,  # 关闭窗口时确认_默认:False",
      "    )",
      "    webview.start()",
      "}",
      ":FastAPIHelp",
      ""
    ],
    "description": ["FastAPI 网络API接口后端库"]
  },
  "uv.FastAPI 网络API接口后端库": {
    "prefix": ["uv fastapi"],
    "body": [
      "@REM 安装 fastapi web框架",
      "uv add \"fastapi\" \"uvicorn\" \"pydantic\" \"pywebview\" \"pyinstaller\" --upgrade --index https://mirrors.aliyun.com/pypi/simple/",
      "@REM 安装 uvicorn 异步服务器",
      "@REM 安装 pydantic 数据接口定义检查与设置管理",
      "@REM 安装 pywebview webGUI框架库",
      "@REM 安装 pyinstaller 打包工具",
      "",
      "goto :FastAPIHelp",
      "{./main.py >> 入口配置:",
      "    import os",
      "    import subprocess",
      "    # 引入 uvicorn->ASGI服务器",
      "    import uvicorn",
      "    # 引入 pywebview",
      "    import webview",
      "    from fastapi import FastAPI",
      "    # 引入 FileResponse->定义HTML文件, RedirectResponse->定义重定向路由地址",
      "    from fastapi.responses import FileResponse, RedirectResponse",
      "    # 引入 StaticFiles->定义静态文件",
      "    from fastapi.staticfiles import StaticFiles",
      "    # 引入 子路由",
      "    from apps.urls import appsAPI",
      "    # 实例化",
      "    app = FastAPI()",
      "    # 定义静态文件的绝对路径",
      "    BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # 获取当前目录的绝对路径",
      "    staticFilePath = os.path.join(BASE_DIR, \"static\")",
      "    if os.path.exists(staticFilePath):",
      "        # 判断存在静态文件目录->挂载静态文件",
      "        \"\"\"挂在静态文件",
      "",
      "        设置参数:",
      "            app.mount(\"url路径参数\", StaticFiles(directory=\"工作目录下的静态文件\"), name=\"static\")",
      "",
      "        HTML文件路径参数修改",
      "        ./dist 重命名-> ./static",
      "        ./dist/index.html 将\"./\"替换成\"static/\" >>>",
      "            href=\"./static/assets/svg_css/*.svg_css\" -> href=\"static/static/assets/svg_css/*.svg_css\"",
      "            src=\"./static/assets/js/index-_0ISTUs5.js\" -> src=\"static/static/assets/js/*.js\"",
      "        \"\"\"",
      "        # 挂载静态文件",
      "        app.mount(\"/\", StaticFiles(directory=staticFilePath), name=\"static\")",
      "    # 路由分发",
      "    app.include_router(",
      "        appsAPI, prefix=\"/api\", tags=[\"get后端数据 ^| post文件操作命令\"]",
      "    )  # prefix=\"router路由地址前缀\"",
      "    @app.get(",
      "        \"/\",",
      "        tags=[\"tags: 前端_HTML 接口\"],",
      "        summary=\"summary: 前端_HTML 接口\",",
      "        description=\"description: 用于路由到测试地址_打包的HTML文件(可以直接在函数内添加注释)\",",
      "        response_description=\"response_description: 响应的数据内容介绍注解\",",
      "        deprecated=False,  # 是否废弃接口",
      "    )",
      "    async def index():",
      "        \"\"\"_首页_\"\"\"",
      "        vueDev = RedirectResponse(",
      "            url=\"http://localhost:[port]/\"",
      "        )  # 定义开发dev重定向RedirectResponse路由",
      "        vueHTML = FileResponse(f\"{staticFilePath}/index.html\")  # 定义打包静态文件",
      "        if not os.path.exists(f\"{staticFilePath}/index.html\"):  # 判断不存在静态文件->调试模式",
      "            return vueDev",
      "        return vueHTML",
      "    def dev():",
      "        \"\"\"_开发模式_",
      "",
      "        dev: 调试方法",
      "        指定当前文件里的app对象->\"__main__:app\"",
      "        \"\"\"",
      "        uvicorn.run(\"main:app\", port=2402, reload=True)",
      "    def release():",
      "        \"\"\"_发布模式_",
      "        pywebview:",
      "        发布模式",
      "        \"\"\"",
      "        # 创建FastAPI进程(args: list[] ^| str, shell=True), 记录进程ID",
      "        p = subprocess.Popen(\"uvicorn main:app --port [port]\", shell=True)",
      "        # 创建pywebview窗口(...,",
      "        #                       resizable=窗口是否可以调整大小_默认:True,",
      "        #                       frameless=创建无框窗户_默认:False,",
      "        #                       confirm_close=关闭窗口时确认_默认:False, ...)",
      "        webview.create_window(",
      "            title=\"便携安装\",",
      "            url=\"http://127.0.0.1:[port]/\",",
      "            width=1140,",
      "            height=1000,",
      "            resizable=False,",
      "            confirm_close=True,",
      "        )",
      "        # 启动pywebview事件循环",
      "        webview.start()",
      "        # 关闭pywebview进程",
      "        p.kill()",
      "    if __name__ == \"__main__\":",
      "        if not os.path.exists(f\"{staticFilePath}/index.html\"):",
      "            print(\"正在启动dev模式...\")",
      "            dev()",
      "        else:",
      "            print(\"正在启动PyWebview模式...\")",
      "            release()",
      "},",
      "{./runServer.py >> 线程启动FastAPI服务(PyInstaller打包的主程序):",
      "    import threading",
      "    import uvicorn",
      "    import webview",
      "    from main import app",
      "    \"\"\"防止打包服务器为单文件时出现路径错误",
      "    重新封装启动文件",
      "    \"\"\"",
      "    # 启动FastAPI服务线程",
      "    t = threading.Thread(target=uvicorn.run, args=(app,), kwargs={\"port\": [port端口]})",
      "    t.daemon = True  # 添加线程守护",
      "    t.start()",
      "    # 在PyWebview应用程序中加载FastAPI应用程序的URL",
      "    webview.create_window(",
      "        title=\"FastAPI_APP\",",
      "        url=\"http://127.0.0.1:[port端口]/\",",
      "        width=窗口宽度,",
      "        height=窗口高度,",
      "        resizable=False,  # 窗口是否可以调整大小_默认:True",
      "        frameless=False,  # 创建无框窗户_默认:False",
      "        confirm_close=False,  # 关闭窗口时确认_默认:False",
      "    )",
      "    webview.start()",
      "}",
      ":FastAPIHelp",
      ""
    ],
    "description": ["FastAPI 网络API接口后端库"]
  }
}

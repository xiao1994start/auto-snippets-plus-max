{
  "-vue 创建vue项目和使用说明": {
    "prefix": ["vue -Install", "vite -Install", "init -vue"],
    "body": [
      "@REM 创建vue项目",
      "call npm create ${1|vue,vite|}@latest ${2:vue-app} -- --template vue-ts --registry https://registry.npm.taobao.org",
      "cd ${2:vue-app}",
      "goto :vueHelp",
      "@REM 说明",
      "临时代理 --registry https://registry.npm.taobao.org",
      "配置参数:{",
      "    -G 全局安装",
      "    -S 局部安装的插件写入package.json文件中的dependencie(默认)",
      "    -D 局部安装的插件写入package.json文件中的devDependencie",
      "    -O 局部安装的插件写入package.json文件中的optionalDependencie",
      "}",
      "安装必备组件:{",
      "    初始化创建安装 : npm i [npm install]",
      "    element-plus UI : npm i element-plus [-S] (https://element-plus.org/zh-CN/guide/quickstart.html)",
      "    axios 网络请求库 : npm i axios [-S] (https://www.axios-http.cn/docs/instance)",
      "    pinia 数据仓库 : npm i pinia [-S] (https://pinia.vuejs.org/zh/getting-started.html)",
      "    Sass CSS扩展语言 : npm i sass [-S]",
      "}",
      "项目设置:{",
      "    ./vite.config.ts >>> (配置打包相对路径_跨域代理设置): {",
      "        export default defineConfig({",
      "            build: { // 配置打包相对路径",
      "                rollupOptions: {",
      "                    output: { // 在这里修改静态资源路径",
      "                        chunkFileNames: 'static/assets/js/[name]-[hash].js',",
      "                        entryFileNames: 'static/assets/js/[name]-[hash].js',",
      "                        assetFileNames: 'static/assets/[ext]/[name]-[hash].[ext]',",
      "                    }",
      "                }",
      "            },",
      "            base: './', // 这里更改打包相对绝对路径",
      "            ...",
      "            server: { // 跨域代理设置",
      "                proxy: {",
      "                    '/api': { // 配置需要代理的路径 => 代理 \"http://host:port/api/\" 后的所有路由",
      "                        target: 'http://127.0.0.1:[port]/api/', // restful 接口规范",
      "                        changeOrigin: true, // 允许跨域",
      "                        ws: true, // 允许 websocket 代理",
      "                        // 重写代理路径 => 作用与 vue 配置 pathRewrite 相同",
      "                        // 发送请求 url: '/api/[服务器响应地址]'",
      "                        rewrite: (path) => path.replace(/^\\/api/, '')",
      "                    }",
      "                }",
      "                },",
      "            ...",
      "        })",
      "    },",
      "    ./src/main.ts >>> (element-plus 组件引用_pinia 组件引用): {",
      "        // 引入 element-plus",
      "        import ElementPlus from 'element-plus'",
      "        import 'element-plus/dist/index.css'",
      "        // 引入 element-plus 图标_注册全局组件",
      "        import * as ElementPlusIconsVue from '@element-plus/icons-vue'",
      "        // element-plus 国际化",
      "        //@ts-ignore 忽略当前ts的类型检测否则有红色警告(打包失败)",
      "        import zhCn from 'element-plus/dist/locale/zh-cn.mjs'",
      "        // 引入pinia仓库",
      "        import { createPinia } from \"pinia\";",
      "        // 创建 Vue 应用实例化",
      "        const app = createApp(App)",
      "        // 注册 ElementPlus 组件, 执行国际化",
      "        app.use(ElementPlus, { locale: zhCn, })",
      "        // 循环引入图标注册全局",
      "        for (const [key, component] of Object.entries(ElementPlusIconsVue)) {",
      "            app.component(key, component)",
      "        }",
      "        // 创建 pinia 应用",
      "        const pinia = createPinia()",
      "        // 注册pinia仓库",
      "        app.use(pinia)",
      "        // 挂载应用实例",
      "        app.mount('#app')",
      "    },",
      "    ./tsconfig.json >>> (Volar 支持): {",
      "        {",
      "            \"compilerOptions\": {",
      "                \"types\": [\"element-plus/global\"],",
      "            } ",
      "        }",
      "    },",
      "    ./src/api/index.ts >>> (axios 基础配置_封装): {",
      "        import axios from \"axios\";",
      "        // 拦截器设置(直接配置axios, 可以不用 axios.create({}) 实例化)",
      "        axios.interceptors.request.use(config => { // 添加请求拦截器",
      "            // 在发送请求之前做些什么",
      "            config.url = '/api/'; // 代理跨域_直接设置api地址(结尾一定要加'/', 防止打包后出现\"POST *** 500\"报错)",
      "            config.headers[\"Content-Type\"] = \"application/json\"; // 请求数据类型",
      "            return config;",
      "        }, error => {",
      "            // 在发送请求之前做些什么",
      "            return Promise.reject(error);",
      "        });",
      "        axios.interceptors.response.use(response => { // 添加响应拦截器",
      "            // 对响应数据做点什么",
      "            return response.data[0]; // .data直接返回data数据_[根据需要添加数据索引]",
      "        }, error => {",
      "            // 对响应错误做点什么",
      "            return Promise.reject(error);",
      "        });",
      "        interface IRes<T = any> { // 自定义返回数据类型(可以单独封装)",
      "            name: string; // 定义 数据名称: 数据类型",
      "            data?: T; // ? 表示可选属性, T 表示泛型(<T = any>可以省略, 直接使用<T>)",
      "        }",
      "        export const get = () => { // 封装GET请求_并导出",
      "            return axios.get<any, IRes<string>>('/') // 规定返回数据格式(.then处理在调用函数的时候进行_避免无法获取返回数据)",
      "        }",
      "        interface IReq<T = any> { // 自定义请求数据类型(可以单独封装)",
      "            name: string;",
      "            data?: T;",
      "        }",
      "        export const post = (params: IReq) => { // 封装POST请求_并导出(params定义post参数类型)",
      "            return axios.post<any, IRes<string>>('/', params) // 规定返回数据格式(传入params数据)",
      "        }",
      "    },",
      "    ./src/store/index.ts >>> >>> (创建一个pinia仓库[封装 axios 请求方法]): {",
      "        // 定义一个小仓库",
      "        import { defineStore } from \"pinia\";",
      "        // 引入 ref 定义响应式数据",
      "        import { ref } from \"vue\";",
      "        // 引入 axios 请求方法",
      "        import { get, post } from \"../api/index\";",
      "        /** 使用defineStore创建仓库",
      "        defineStore(仓库名, () => {",
      "        // 务必返回一个对象:属性与方法可以提供个组件使用",
      "        return {返回数据_方法}",
      "        })",
      "        *  defineStore方法执行会返回一个函数,函数作用让组件获取仓库数据",
      "        */",
      "        export let useStore = defineStore('仓库名', () => {",
      "            // 定义仓库数据",
      "            let useAllData = ref({}); // 定义响应式引用",
      "            // 仓库数据解构",
      "            let 数据名 = ref(初始值)",
      "            // 定义仓库方法(get, post)",
      "            const 方法 = () => { // 定义方法(方法返回值可选)",
      "                ...",
      "                // 数据本地化",
      "                localStorage.setItem('数据名', 数据名.value); // 存储数据",
      "                return 方法返回值",
      "            }",
      "            return { // 返回数据_方法",
      "                本地数据: localStorage.getItem('数据名'); // 读取数据",
      "                数据,",
      "                方法,",
      "            }",
      "        })",
      "    },",
      "    ./src/*.vue >>> (使用pinia仓库[仓库中包含 axios 请求方法]): {",
      "        <script setup lang=\"ts\">",
      "            // 引入 pinia 仓库",
      "            import { useStore } from \"./store/index\";",
      "            // 引入 pinia 仓库数据结构方法",
      "            import { storeToRefs } from 'pinia';",
      "            // 调用仓库函数_定义仓库函数为对象(定义仓库之后才能获取仓库的返回值)",
      "            const user = useStore()",
      "            // 解构仓库返回值中的数据",
      "            let { 数据名, } = storeToRefs(user)",
      "            ...",
      "            import { ref, onMounted } from 'vue'; // 引入 ref_响应式的引用 onMounted_生命周期钩子函数",
      "            const 响应式数据 = ref() // 声明响应式引用_<定义类型>_('初始化')",
      "            onMounted(async () => {",
      "                let res = await user.仓库中的GET方法(); // 调用仓库中的GET方法_并传入回调函数_res为回调函数参数",
      "                    console.log(\">>\", res); // 打印返回数据, 观察数据结构",
      "            })",
      "            ...",
      "        </script>",
      "    }",
      "}",
      "运行: npm run dev",
      ":vueHelp"
    ],
    "description": ["创建vue项目和使用说明"]
  }
}

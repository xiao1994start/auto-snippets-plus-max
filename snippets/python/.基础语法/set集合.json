{
  "set 数据类型转换": {
    "prefix": ["set_"],
    "body": ["set(${1:arg})"],
    "description": ["数据类型转换->set"]
  },
  "set 类型声明": {
    "prefix": [":set"],
    "body": [": set"],
    "description": ["类型声明: set"]
  },
  "set.add 添加一个元素": {
    "prefix": ["set_add"],
    "body": ".add(${1:element})",
    "description": ["set.add 向set集合中添加一个元素"]
  },
  "set.add ": {
    "prefix": ["set_add="],
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.add('orange') ",
      "print(fruits)"
    ],
    "description": ["使用 set.add 的示例"]
  },
  "set.clear 删除所有元素": {
    "prefix": ["set_clear"],
    "body": ".clear()",
    "description": ["set.clear 从set集合中删除所有元素"]
  },
  "set.clear ": {
    "prefix": ["set_clear="],
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.clear()",
      "print(fruits)"
    ],
    "description": ["使用 set.clear 的示例"]
  },
  "set.copy 副本": {
    "prefix": ["set_copy"],
    "body": ".copy()",
    "description": ["set.copy 返回set该集的副本"]
  },
  "set.copy ": {
    "prefix": ["set_copy="],
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "x = fruits.copy()",
      "print(x)"
    ],
    "description": ["使用 set.copy 的示例"]
  },
  "set.difference -差集": {
    "prefix": ["set_difference"],
    "body": ".difference(${1:set})",
    "description": [
      "set.difference 返回包含两个或多个集合之间差异的集合\r\n运算符: -"
    ]
  },
  "set.difference 1": {
    "prefix": ["set_difference=1"],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.difference(y)",
      "print(z)"
    ],
    "description": ["使用 set.difference 的示例"]
  },
  "set.difference 2": {
    "prefix": ["set_difference=2"],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = y.difference(x) ",
      "print(z)"
    ],
    "description": ["使用 set.difference 的示例"]
  },
  "set.difference_update": {
    "prefix": ["set_difference_update"],
    "body": ".difference_update(${1:set})",
    "description": [
      "set.difference_update 移除集合中的元素, 该元素在指定的集合也存在"
    ]
  },
  "set.difference_update ": {
    "prefix": ["set_difference_update="],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.difference_update(y)",
      "print(x)"
    ],
    "description": ["使用 set.difference_update 的示例"]
  },
  "set.discard 删除元素(无提示)": {
    "prefix": ["set_discard", "set_del"],
    "body": ".discard(${1:item})",
    "description": ["set.discard 删除指定项目"]
  },
  "set.discard ": {
    "prefix": ["set_discard="],
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.discard('banana') ",
      "print(fruits)"
    ],
    "description": ["使用 set.discard 的示例"]
  },
  "set.intersection &交集": {
    "prefix": ["set_intersection"],
    "body": ".intersection(${1:set})",
    "description": [
      "set.intersection 返回一个集合, 即其他两个集合的交集\r\n运算符: &"
    ]
  },
  "set.intersection 1": {
    "prefix": ["set_intersection=1"],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.intersection(y)",
      "print(z)"
    ],
    "description": ["使用 set.intersection 的示例"]
  },
  "set.intersection 2": {
    "prefix": ["set_intersection=2"],
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'c', 'd', 'e'}",
      "z = {'f', 'g', 'c'}",
      "result = x.intersection(y, z)",
      "print(result)"
    ],
    "description": ["使用 set.intersection 的示例"]
  },
  "set.intersection_update 返回集合的交集": {
    "prefix": ["set_intersection_update"],
    "body": ".intersection_update(${1:set})",
    "description": [
      "set.intersection_update 删除此集合中其他指定集合中不存在的项目"
    ]
  },
  "set.intersection_update 1": {
    "prefix": ["set_intersection_update=1"],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.intersection_update(y)",
      "print(x)"
    ],
    "description": ["使用 set.intersection_update 的示例"]
  },
  "set.intersection_update =set2": {
    "prefix": ["set_intersection_update=2"],
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'c', 'd', 'e'}",
      "z = {'f', 'g', 'c'}",
      "x.intersection_update(y, z)",
      "print(x)"
    ],
    "description": ["使用 set.intersection_update 的示例"]
  },
  "set.isdisjoint 判断元素相同": {
    "prefix": ["set_isdisjoint"],
    "body": ".isdisjoint(${1:set})",
    "description": [
      "set.isdisjoint 判断两个集合是否包含相同的元素, 如果没有返回 True, 否则返回 False"
    ]
  },
  "set.isdisjoint 1": {
    "prefix": ["set_isdisjoint=1"],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'facebook'}",
      "z = x.isdisjoint(y)",
      "print(z)"
    ],
    "description": ["使用 set.isdisjoint 的示例"]
  },
  "set.isdisjoint 2": {
    "prefix": ["set_isdisjoint=2"],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'cherry', 'banana', 'apple'}",
      "z = x.isdisjoint(y) ",
      "print(z)"
    ],
    "description": ["使用 set.isdisjoint 的示例"]
  },
  "set.issubset 判断参数子集": {
    "prefix": ["set_issubset"],
    "body": ".issubset(${1:set})",
    "description": ["set.issubset 判断指定集合是否为该方法参数集合的子集"]
  },
  "set.issubset 1": {
    "prefix": ["set_issubset=1"],
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'f', 'e', 'd', 'c', 'b', 'a'}",
      "z = x.issubset(y) ",
      "print(z)"
    ],
    "description": ["使用 set.issubset 的示例"]
  },
  "set.issubset 2": {
    "prefix": ["set_issubset=2"],
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'f', 'e', 'd', 'c', 'b'}",
      "z = x.issubset(y) ",
      "print(z)"
    ],
    "description": ["使用 set.issubset 的示例"]
  },
  "set.issuperset 判断指定集合子集": {
    "prefix": ["set_issuperset"],
    "body": ".issuperset(${1:set})",
    "description": ["set.issuperset 判断该方法的参数集合是否为指定集合的子集"]
  },
  "set.issuperset 1": {
    "prefix": ["set_issuperset=1"],
    "body": [
      "x = {'f', 'e', 'd', 'c', 'b', 'a'}",
      "y = {'a', 'b', 'c'}",
      "z = x.issuperset(y) ",
      "print(z)"
    ],
    "description": ["使用 set.issuperset 的示例"]
  },
  "set.issuperset 2": {
    "prefix": ["set_issuperset=2"],
    "body": [
      "x = {'f', 'e', 'd', 'c', 'b'}",
      "y = {'a', 'b', 'c'}",
      "z = x.issuperset(y) ",
      "print(z)"
    ],
    "description": ["使用 set.issuperset 的示例"]
  },
  "set.pop 移除元素": {
    "prefix": ["set_pop"],
    "body": ".pop()",
    "description": ["set.pop 删除指定元素 或 随机移除元素"]
  },
  "set.pop ": {
    "prefix": ["set_pop="],
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.pop() ",
      "print(fruits)"
    ],
    "description": ["使用 set.pop 的示例"]
  },
  "set.remove 移除指定元素": {
    "prefix": ["set_remove"],
    "body": ".remove(${1:item})",
    "description": ["set.remove 移除指定元素"]
  },
  "set.remove ": {
    "prefix": ["set_remove="],
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.remove('banana') ",
      "print(fruits)"
    ],
    "description": ["使用 set.remove 的示例"]
  },
  "set.symmetric_difference ^不重复元素集合": {
    "prefix": ["set_symmetric_difference"],
    "body": ".symmetric_difference(${1:set})",
    "description": [
      "set.symmetric_difference 返回两个集合中不重复的元素集合\r\n运算符: ^"
    ]
  },
  "set.symmetric_difference ": {
    "prefix": ["set_symmetric_difference="],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.symmetric_difference(y) ",
      "print(z)"
    ],
    "description": ["使用 set.symmetric_difference 的示例"]
  },
  "set.symmetric_difference_update 移除重复元素添加不同元素返回": {
    "prefix": ["set_symmetric_difference_update"],
    "body": ".symmetric_difference_update(${1:set})",
    "description": [
      "set.symmetric_difference_update 移除当前集合中在另外一个指定集合相同的元素, 并将另外一个指定集合中不同的元素插入到当前集合中"
    ]
  },
  "set.symmetric_difference_update ": {
    "prefix": ["set_symmetric_difference_update="],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.symmetric_difference_update(y) ",
      "print(x)"
    ],
    "description": ["使用 set.symmetric_difference_update 的示例"]
  },
  "set.union |并集": {
    "prefix": ["set_union"],
    "body": ".union(${1:set})",
    "description": ["set.union 返回两个集合的并集\r\n运算符: |"]
  },
  "set.union 1": {
    "prefix": ["set_union=1"],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.union(y) ",
      "print(z)"
    ],
    "description": ["使用 set.union 的示例"]
  },
  "set.union =set2": {
    "prefix": ["set_union=2"],
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'f', 'd', 'a'}",
      "z = {'c', 'd', 'e'}",
      "result = x.union(y, z) ",
      "print(result)"
    ],
    "description": ["使用 set.union 的示例"]
  },
  "set.update 添加元素": {
    "prefix": ["set_update"],
    "body": ".update(${1:set})",
    "description": ["set.update 给集合添加元素"]
  },
  "set.update ": {
    "prefix": ["set_update="],
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.update(y) ",
      "print(x)"
    ],
    "description": ["使用 set.update 的示例"]
  }
}

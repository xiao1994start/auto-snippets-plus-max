{
  "引入 multiprocessing 多线线程库": {
    "prefix": ["import_multiprocessing"],
    "body": ["import multiprocessing"],
    "description": ["引入 multiprocessing 多线线程库"]
  },
  "multiprocessing.Process 创建单个进程": {
    "prefix": ["multiprocessing_Process"],
    "body": [".Process(target=${1:func}, args=[${2:args}])"],
    "description": [
      "multiprocessing.Process 创建单个进程",
      "适合场景:",
      "`每个进程执行的任务相互独立, 没有依赖关系",
      "`需要对每个进程进行详细的控制和管理",
      "`需要获得每个进程的返回结果",
      "`需要控制每个进程的生命周期"
    ]
  },
  "multiprocessing.start 启动进程": {
    "prefix": ["multiprocessing_start"],
    "body": [".start()"],
    "description": ["multiprocessing.start 启动进程"]
  },
  "multiprocessing.join 在当前位置阻塞主进程": {
    "prefix": ["multiprocessing_join"],
    "body": [".join"],
    "description": [
      "multiprocessing.join 在当前位置阻塞主进程",
      "等待带执行 join() 的进程结束后再继续执行主进程"
    ]
  },
  "with multiprocessing.Pool 创建进程池": {
    "prefix": ["with_multiprocessing_Pool"],
    "body": [
      "with multiprocessing.Pool(${1:processes=4}) as pool:  # 适用于多进程复用",
      "    $0",
      "    pass"
    ],
    "description": [
      "with multiprocessing.Pool 创建进程池",
      "适合场景:",
      "`任务可以并行执行, 且相互之间没有依赖关系",
      "`任务的数量较大, 可以使用进程池进行复用",
      "`只需要获取任务的返回结果, 而不需要对每个进程进行详细的控制和管理",
      "`需要限制并行执行的进程数量"
    ]
  },
  "multiprocessing.Pool.map 创建线程池(单一参数)": {
    "prefix": ["multiprocessing_Pool_map"],
    "body": [".map(${1:func}, [${2:args}])"],
    "description": ["multiprocessing.Pool.map 创建线程池(单一参数)"]
  },
  "multiprocessing.Pool.starmap 创建线程池(多参数)": {
    "prefix": ["multiprocessing_Pool_starmap"],
    "body": [
      ".starmap(${1:func}, ${2:iterable})  # 无需传入参数时, 使用 itertools.repeat 生成一个空元组"
    ],
    "description": ["multiprocessing.Pool.starmap 创建线程池(多参数)"]
  }
}

{
  "flet.class(Container) 创建 flet 类 Container 容器对象": {
    "prefix": ["ft_class_Container=", "flet_class_Container="],
    "body": [
      "class ${1:FletObject}(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(self,page: ft.Page) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建 flet 类 Container 容器对象",
      "        继承父类ft.Container容器常用基础参数",
      "            expand=True:拉伸 / width:指定宽度 | height:指定高度",
      "            bgcolor:背景颜色 | border_radius:圆角 | padding:内边距 | margin:外边距",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类ft.Container容器对象属性[expand=True:拉伸/width:指定宽度/height:指定高度]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      ""
    ],
    "description": ["flet.class(Container) 创建 flet 类 Container 容器对象"]
  },
  "flet.class.def.ControlEvent Flet自定义对象控件事件.tmpl": {
    "prefix": ["ft_class_def_control_event=", "flet_class_def_control_event="],
    "body": [
      "def ${1:flet_event}(self, e: ft.ControlEvent):",
      "    \"\"\"",
      "    ${2:Callback function for the event}",
      "    \"\"\"",
      "    ...",
      "    self.page.update()",
      ""
    ],
    "description": ["flet.class.def.ControlEvent Flet自定义对象控件事件.tmpl"]
  },
  "flet.class.MainApp SideBar from NavigationRail 创建Flet界面.tmpl": {
    "prefix": [
      "ft_class_for_SideBar_NavigationRail=",
      "flet_class_for_SideBar_NavigationRail="
    ],
    "body": [
      "from pathlib import Path",
      "from typing import Callable",
      "",
      "import darkdetect  # * 引入 darkdetect 智能主题模式检测库",
      "import flet as ft  # * 引入 flet WebUI框架",
      "",
      "# from flet import *  # * 引入 flet 框架所有子控件",
      "",
      "",
      "class SideBar(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(",
      "        self,",
      "        page: ft.Page,",
      "        tab_event: Callable = lambda e: print(e),",
      "        min_width: int | float = 110,",
      "        extended_width: int | float = 190,",
      "    ) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建侧边栏,继承自父类 ft.Container 容器对象",
      "        继承父类ft.Container容器常用基础参数",
      "            expand=True:拉伸 / width:指定宽度 | height:指定高度",
      "            bgcolor:背景颜色 | border_radius:圆角 | padding:内边距 | margin:外边距",
      "        :param page: ft.Page | 页面对象",
      "        :param tab_event: Callable | 侧边栏[中间控件切换页面按钮]事件回调函数",
      "        :param min_width: int | float | 默认值: 100 | 侧边栏[最小]宽度",
      "        :param extended_width: int | float | 默认值: 180 | 侧边栏[扩展]宽度",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类ft.Container容器对象属性[expand=True:拉伸/width:指定宽度/height:指定高度]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      "        # * 定义侧边栏 [最小]宽度 | [扩展]宽度",
      "        self.min_width = min_width",
      "        self.extended_width = extended_width",
      "",
      "        self.tab_event = tab_event",
      "",
      "    @property  # * 侧边栏容器",
      "    def rail(self):",
      "        \"\"\"",
      "        构建 侧边栏",
      "        \"\"\"",
      "        self.__menu = ft.Container(  # * 容器",
      "            margin=0,  # * 外边距",
      "            padding=10,  # * 内边距",
      "            border_radius=0,  # * 边框圆角",
      "            width=self.min_width,  # * 宽度",
      "            alignment=ft.alignment.center,  # * 对齐方式",
      "            content=ft.Column(  # * 垂直布局",
      "                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,  # * 垂直布局对齐方式[SPACE_BETWEEN: 均匀分布]",
      "                horizontal_alignment=ft.CrossAxisAlignment.CENTER,  # * [水平]对齐方式",
      "                controls=[  # * [列]控件",
      "                    self.header_control,",
      "                    self.tab_control,",
      "                    self.footer_control,",
      "                ],",
      "            ),",
      "        )",
      "        return self.__menu",
      "",
      "    @property  # * 侧边栏头部容器",
      "    def header_control(self):",
      "        \"\"\"",
      "        构建 侧边栏[头部]容器内容",
      "        \"\"\"",
      "        self.__header = ft.Container(  # * 侧边栏头部容器(ft.Container 只能添加一个控件, 此处嵌套 ft.Column 可以添加多个控件)[ft.Container 嵌套 ft.Column: 强调头部控件]",
      "            content=ft.Column(  # * [侧边栏头部容器] 垂直布局",
      "                alignment=ft.MainAxisAlignment.CENTER,  # * 对齐方式",
      "                horizontal_alignment=ft.CrossAxisAlignment.CENTER,  # * [水平]对齐方式",
      "                controls=[  # * 侧边栏[头部]控件",
      "                    *self.headers,",
      "                    self.sidebar_extended_button,",
      "                ],",
      "            ),",
      "        )",
      "        return self.__header",
      "",
      "    @property  # * 侧边栏头部容器内容",
      "    def headers(self):",
      "        self.__header = ft.Image(",
      "            src='https://github.githubassets.com/assets/gh-desktop-7c9388a38509.png',",
      "            width=88,",
      "            height=88,",
      "            border_radius=16,",
      "        )",
      "        self.__header = ft.Icon(name=ft.Icons.TEN_K, size=88)",
      "        self.__headers = [self.__header]",
      "        return self.__headers",
      "",
      "    @property  # * 侧边栏[扩展/折叠]按钮",
      "    def sidebar_extended_button(self):",
      "        \"\"\"",
      "        侧边栏[扩展]按钮",
      "        \"\"\"",
      "        self.__sidebar_extended_icon = ft.Icon(",
      "            name=ft.Icons.MENU_OPEN_SHARP,",
      "            size=32,",
      "        )",
      "        self.__sidebar_extended_button = ft.IconButton(",
      "            selected_icon=ft.Icons.MENU,",
      "            icon_size=32,",
      "            selected=True,",
      "            width=self.min_width,",
      "            content=ft.Container(  # * 容器(替代: ft.IconButton.icon 属性)",
      "                content=ft.Row(  # * [水平]布局",
      "                    controls=[",
      "                        self.__sidebar_extended_icon,",
      "                        ft.Text(value='菜单', size=16),",
      "                    ],",
      "                    alignment=ft.MainAxisAlignment.CENTER,",
      "                ),",
      "            ),",
      "            on_click=lambda e: self.switch_sidebar(e),",
      "        )",
      "        return self.__sidebar_extended_button",
      "",
      "    def switch_sidebar(self, e: ft.ControlEvent):",
      "        \"\"\"",
      "        切换侧边栏按钮图标宽度(展开/收起)按钮",
      "        :param e: 事件对象",
      "        \"\"\"",
      "        e.control.selected = not e.control.selected  # * 切换:事件按钮选中状态",
      "        if not self.__tab.extended:  # 侧边栏: 收起",
      "            # * 切换:侧边栏展开",
      "            self.__menu.width = self.extended_width",
      "            e.control.width = self.extended_width",
      "            self.__theme_btn.width = self.extended_width",
      "        else:  # 侧边栏: 展开",
      "            # * 切换:侧边栏收起",
      "            self.__menu.width = self.min_width",
      "            e.control.width = self.min_width",
      "            self.__theme_btn.width = self.min_width",
      "        # * NavigationRail 菜单宽度切换",
      "        self.__tab.extended = not self.__tab.extended",
      "        self.page.update()",
      "",
      "    @property  # * 侧边栏中间容器",
      "    def tab_control(self):",
      "        \"\"\"",
      "        定义 侧边栏[中间]控件",
      "        \"\"\"",
      "        self.__tab = ft.NavigationRail(",
      "            # expand: 自适应填充(将 NavigationRail 置于子控件中时[expand=True], 子控件会根据 NavigationRail 的宽度自适应)",
      "            expand=True,",
      "            # selected_index=0: 默认选中第一个",
      "            selected_index=0,  # 0: 默认选中[destinations]中第一个[e.control.selected_index: 当前选中控件索引]",
      "            # label_type=ft.NavigationRailLabelType.ALL: 显示所有标签",
      "            label_type=ft.NavigationRailLabelType.ALL,  # ft.NavigationRailLabelType.ALL: 显示所有标签",
      "            # min_width=100(默认): 最小宽度",
      "            min_width=self.min_width,  # 最小宽度",
      "            # min_extended_width=256(默认): 最小扩展宽度",
      "            min_extended_width=self.extended_width,  # 最小扩展宽度[128: 两个汉字宽度]",
      "            # extended=None(默认): 导航栏扩展状态",
      "            extended=False,  # 导航栏扩展状态",
      "            # leading: 导航栏第一顺位控件(不参与selected_index)",
      "            # group_alignment=0.0: 导航栏控件对齐方式[-1.0: 左对齐; 0.0: 居中对齐; 1.0: 右对齐]",
      "            group_alignment=-1.0,  # 导航栏控件对齐方式[-1.0: 左/顶 对齐; 0.0: 居中对齐; 1.0: 右/底 对齐]",
      "            # destinations: 导航栏中间控件(不少于 2 个)",
      "            destinations=self.tabs,",
      "            # on_change: 导航栏中间控件点击事件[e.control.selected_index: 当前选中控件索引]",
      "            on_change=self.tab_event,",
      "            # trailing: 导航栏最后顺位控件(不参与selected_index)",
      "        )",
      "        return self.__tab",
      "",
      "    @property  # * 侧边栏中间容器内容",
      "    def tabs(self):",
      "        self.__tabs = [  # * 侧边栏[主体]按钮(>2个控件) [默认: 选中第一个]",
      "            ft.NavigationRailDestination(",
      "                icon=ft.Icons.HOUSE_OUTLINED,  # icon: 图标",
      "                selected_icon=ft.Icons.HOUSE,  # selected_icon: 选中时的图标",
      "                label='首页',  # label: 标签",
      "            ),",
      "            ft.NavigationRailDestination(",
      "                icon=ft.Icons.SETTINGS_OUTLINED,  # icon: 图标",
      "                selected_icon=ft.Icons.SETTINGS,  # selected_icon: 选中时的图标",
      "                label='设置',  # label: 标签",
      "            ),",
      "            ft.NavigationRailDestination(",
      "                icon=ft.Icons.FAVORITE_BORDER,  # icon: 图标",
      "                selected_icon=ft.Icons.FAVORITE,  # selected_icon: 选中时的图标",
      "                label='喜欢',  # label: 标签",
      "            ),",
      "            ft.NavigationRailDestination(",
      "                icon=ft.Image(src='https://res.wx.qq.com/a/wx_fed/assets/res/OTE0YTAw.png', width=24, border_radius=16),  # icon: 图标",
      "                selected_icon=ft.Image(",
      "                    src='https://res.wx.qq.com/a/wx_fed/assets/res/OTE0YTAw.png', width=24, border_radius=16",
      "                ),  # selected_icon: 选中时的图标",
      "                label='聊天',  # label: 标签",
      "            ),",
      "        ]",
      "        return self.__tabs",
      "",
      "    @property  # * 侧边栏底部容器内容",
      "    def footer_control(self):",
      "        \"\"\"",
      "        构建 侧边栏[底部]容器内容",
      "        \"\"\"",
      "        self.__footer_control = ft.Column(  # * [侧边栏底部容器] 垂直布局",
      "            horizontal_alignment=ft.CrossAxisAlignment.CENTER,  # * [水平]对齐方式",
      "            controls=[  # * 侧边栏[底部]控件",
      "                ft.Divider(height=1),",
      "                self.theme_button,",
      "            ],",
      "        )",
      "        return self.__footer_control",
      "",
      "    @property  # * 主题切换按钮",
      "    def theme_button(self):",
      "        \"\"\"",
      "        通过 darkdetect 检测系统主题,设置主题切换按钮  # ! import darkdetect  # * 引入 darkdetect 检测系统主题",
      "        \"\"\"",
      "        is_dark = darkdetect.isDark()",
      "        if is_dark:  # 当前系统: 暗黑模式",
      "            ico = ft.Icons.DARK_MODE",
      "            selected_ico = ft.Icons.LIGHT_MODE",
      "        else:  # 当前系统: 浅色模式",
      "            ico = ft.Icons.LIGHT_MODE",
      "            selected_ico = ft.Icons.DARK_MODE",
      "        self.__theme_btn = ft.IconButton(icon=ico, selected_icon=selected_ico, width=self.min_width, on_click=self.toggle_theme)",
      "        return self.__theme_btn",
      "",
      "    def toggle_theme(self, e: ft.ControlEvent):",
      "        \"\"\"",
      "        改变主题模式  # ! import darkdetect  # * 引入 darkdetect 检测系统主题",
      "        :param e: 事件对象",
      "        eg.主题切换按钮:  # * [使用 ft.IconButton 中的 selected_icon 属性切换图标]",
      "            is_dark = darkdetect.isDark()",
      "            if is_dark:  # 当前系统: 暗黑模式",
      "                ico = ft.Icons.DARK_MODE",
      "                selected_ico = ft.Icons.LIGHT_MODE",
      "            else:  # 当前系统: 浅色模式",
      "                ico = ft.Icons.LIGHT_MODE",
      "                selected_ico = ft.Icons.DARK_MODE",
      "            ft.IconButton(icon=ico, selected_icon=selected_ico, on_click=toggle_theme)",
      "        \"\"\"",
      "        if self.page.theme_mode == ft.ThemeMode.SYSTEM:",
      "            is_dark = darkdetect.isDark()",
      "            # if is_dark:",
      "            #     self.page.theme_mode = ft.ThemeMode.LIGHT  # 当前系统: 浅色模式",
      "            # else:",
      "            #     self.page.theme_mode = ft.ThemeMode.DARK  # 当前系统: 暗黑模式",
      "            self.page.theme_mode = ft.ThemeMode.LIGHT if is_dark else ft.ThemeMode.DARK",
      "        else:",
      "            # if self.page.theme_mode == ft.ThemeMode.DARK:  # 当前系统: 暗黑模式",
      "            #     self.page.theme_mode = ft.ThemeMode.LIGHT",
      "            # elif self.page.theme_mode == ft.ThemeMode.LIGHT:  # 当前系统: 浅色模式",
      "            #     self.page.theme_mode = ft.ThemeMode.DARK",
      "            self.page.theme_mode = ft.ThemeMode.LIGHT if self.page.theme_mode == ft.ThemeMode.DARK else ft.ThemeMode.DARK",
      "        e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "        self.page.update()",
      "",
      "",
      "class TabView(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(self, page: ft.Page) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建 flet 类 Container 容器对象, 构建内容页面",
      "        继承父类ft.Container容器常用基础参数",
      "            expand=True:拉伸 / width:指定宽度 | height:指定高度",
      "            bgcolor:背景颜色 | border_radius:圆角 | padding:内边距 | margin:外边距",
      "        :param page: ft.Page | 页面对象",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类ft.Container容器对象属性[expand=True:拉伸/width:指定宽度/height:指定高度]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      "    @property  # * 主页",
      "    def home_view(self):",
      "        self.__home_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='✨--欢迎━(*｀∀´*)ノ亻!--', size=48),",
      "            ],",
      "            expand=True,",
      "        )",
      "        return self.__home_view",
      "",
      "    @property  # * 设置页",
      "    def setting_view(self):",
      "        self.__setting_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='🕹️设置', size=48),",
      "            ],",
      "            expand=True,",
      "        )",
      "        return self.__setting_view",
      "",
      "",
      "class MianApp(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(self, page: ft.Page) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建 flet 类 Container 容器对象",
      "        继承父类ft.Container容器常用基础参数",
      "            expand=True:拉伸 / width:指定宽度 | height:指定高度",
      "            bgcolor:背景颜色 | border_radius:圆角 | padding:内边距 | margin:外边距",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类ft.Container容器对象属性[expand=True:拉伸/width:指定宽度/height:指定高度]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      "        # * 页面配置",
      "        self.page_conf",
      "",
      "        # * 定义[侧边栏]",
      "        self.sidebar = SideBar(page=self.page)",
      "        # * 侧边栏[中间控件切换页面按钮]事件回调函数",
      "        self.sidebar.tab_event = self.tab_event",
      "",
      "        # * 定义[内容页面]对象",
      "        self.page_view = TabView(page=self.page)",
      "",
      "        # * 定义[内容页面]列表",
      "        self.views = [",
      "            # * 自定义页面            # * 自定义页面",
      "            self.page_view.home_view,",
      "            self.page_view.setting_view,",
      "            # * 内置页面",
      "            self.loading_view,",
      "            self.error_view,",
      "        ]",
      "",
      "        # * 包装[内容页面]容器对象 并 指定初始化界面",
      "        self.view = ft.Container(",
      "            content=self.views[self.sidebar.tab_control.selected_index],",
      "            expand=True,",
      "        )",
      "",
      "        self.page.add(",
      "            ft.Row(  # * [水平]布局",
      "                expand=True,  # * 拉伸(若限制 宽度/高度, 则此属性无效)",
      "                spacing=0,  # * 元素间距",
      "                controls=[  # * 添加控件",
      "                    self.sidebar.rail,  # * 侧边栏",
      "                    ft.VerticalDivider(width=1),  # * 垂直分割线",
      "                    self.view,",
      "                ],",
      "            )",
      "        )",
      "",
      "    def tab_event(self, e: ft.ControlEvent | int | None = None):",
      "        \"\"\"",
      "        侧边栏",
      "        \"\"\"",
      "        max_index = len(self.views) - 1",
      "        if isinstance(e, int):",
      "            index = e",
      "            self.view.content = self.views[index]",
      "        elif e is None:",
      "            self.view.content = self.views[max_index]",
      "        else:",
      "            index = e.control.selected_index",
      "            # if index < max_index:",
      "            #     self.view.content = self.views[index]",
      "            # else:",
      "            #     self.view.content = self.views[max_index - 1]",
      "            self.view.content = self.views[index] if index < max_index else self.views[max_index - 1]",
      "        self.view.update()",
      "",
      "    @property  # * 页面配置属性",
      "    def page_conf(self):",
      "        \"\"\"",
      "        页面配置",
      "        \"\"\"",
      "        # * 页面标题",
      "        self.page.title = '🤖Flet Counter Example'",
      "        # * 字体",
      "        self.page.fonts = {",
      "            # 'LightFont': str(Path(Path(__file__).parent.resolve(), 'Light.ttf'))",
      "            # 'NormalFont': str(Path(Path(__file__).parent.resolve(), 'Normal.ttf'))",
      "            # 'BoldFont': str(Path(Path(__file__).parent.resolve(), 'Bold.ttf'))",
      "        }",
      "        # * 定义主题方案 [字体 | 配色]",
      "        self.page.theme = ft.Theme(",
      "            # font_family='NormalFont',",
      "            color_scheme=ft.ColorScheme(  # 浅色主题配色方案",
      "                primary=ft.Colors.BLACK,  # 应用界面和组件中的主要颜色[图标/按钮/标签 等界面元素或控件的颜色]",
      "            ),",
      "        )",
      "        self.page.dark_theme = ft.Theme(",
      "            # font_family='NormalFont',",
      "            color_scheme=ft.ColorScheme(  # 深色主题配色方案",
      "                primary=ft.Colors.WHITE,  # 应用界面和组件中的主要颜色[图标/按钮/标签 等界面元素或控件的颜色]",
      "            ),",
      "        )",
      "        # * 主题模式 (LIGHT: 浅色, DARK: 深色, SYSTEM[默认]: 系统默认)",
      "        self.page.theme_mode = ft.ThemeMode.SYSTEM",
      "        # * 子控件[垂直]对齐方式 (START[默认]: 顶部, CENTER: 居中, END: 底部, SPACE_BETWEEN: 上下两端对齐, SPACE_AROUND: 上下两端对齐, SPACE_EVENLY: 上下两端对齐)",
      "        self.page.vertical_alignment = ft.MainAxisAlignment.START",
      "        # * 子控件[水平]对齐方式 (START[默认]: 左侧, CENTER: 居中, END: 右侧, STRETCH: 拉伸, BASELINE: 基线对齐)",
      "        self.page.horizontal_alignment = ft.CrossAxisAlignment.START",
      "        # * 页面内边距 (0[默认]: 无内边距, 10: 10px内边距)",
      "        self.page.padding = 0",
      "        # * 页面外边距 (0[默认]: 无外边距, 10: 10px外边距)",
      "        self.page.spacing = 0",
      "        # * 桌面应用/页面 图标 (相对路径)",
      "        # self.page.window.icon = 'assets/icon.png'",
      "        # * 桌面应用/页面 对齐方式(初始位置) [ft.Alignment: 居中:(0,0); 左上:(-1, -1); 右下:(1, 1)]",
      "        self.page.window.alignment = ft.Alignment(0, 0)",
      "        # * 桌面应用/页面 宽度 | 高度",
      "        self.page.window.width = 1280",
      "        self.page.window.height = 720",
      "        # * 桌面应用/页面 最小宽度 | 最小高度",
      "        self.page.window.min_width = 1280",
      "        self.page.window.min_height = 720",
      "        return self.page",
      "",
      "    @property  # * loading_加载中页面",
      "    def loading_view(self):",
      "        \"\"\"",
      "        loading: 加载中页面",
      "        \"\"\"",
      "        self.__loading_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='loading...', size=32, color=ft.Colors.GREY_500),",
      "            ],",
      "            expand=True,",
      "            alignment=ft.MainAxisAlignment.CENTER,",
      "            horizontal_alignment=ft.CrossAxisAlignment.CENTER,",
      "        )",
      "        return self.__loading_view",
      "",
      "    @property  # * 404_错误页面",
      "    def error_view(self):",
      "        \"\"\"",
      "        404: 错误页面",
      "        \"\"\"",
      "        self.__error_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='🔞__Code__: 404', size=64),",
      "            ],",
      "            expand=True,",
      "            alignment=ft.MainAxisAlignment.START,",
      "            horizontal_alignment=ft.CrossAxisAlignment.START,",
      "        )",
      "        return self.__error_view",
      "",
      "",
      "if __name__ == '__main__':",
      "    \"\"\"",
      "    运行入口 | 调试运行",
      "    \"\"\"",
      "    ft.app(",
      "        target=MianApp,  # * 运行目标[包含 page.add 的函数或类名]",
      "        use_color_emoji=True,  # * emoji表情是否使用颜色",
      "        # view=ft.WEB_BROWSER,  # *运行模式: (默认:独立窗口, WEB_BROWSER:浏览器)",
      "    )",
      ""
    ],
    "description": ["flet.class.MainApp from NavigationRail 创建Flet界面.tmpl"]
  },
  "flet.class.MainApp SideBar from Button 创建Flet侧边栏导航界面.tmpl": {
    "prefix": [
      "ft_class_for_SideBar_Button=",
      "flet_class_for_SideBar_Button="
    ],
    "body": [
      "from pathlib import Path",
      "",
      "import darkdetect  # * 引入 darkdetect 智能主题模式检测库",
      "import flet as ft  # * 引入 flet WebUI框架",
      "from flet import *  # * 引入 flet 框架所有子控件",
      "",
      "",
      "class SideBar(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(self, page: ft.Page) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建 flet 类 Container 容器对象",
      "        继承父类ft.Container容器常用基础参数",
      "            expand=True:拉伸 / width:指定宽度 | height:指定高度",
      "            bgcolor:背景颜色 | border_radius:圆角 | padding:内边距 | margin:外边距",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类ft.Container容器对象属性[expand=True:拉伸/width:指定宽度/height:指定高度]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      "        # * 顶部按钮",
      "        self.home_btn = self.button(icon=ft.Icons.HOUSE, text='主页')",
      "        self.chat_btn = self.button(icon='https://res.wx.qq.com/a/wx_fed/assets/res/OTE0YTAw.png', text='聊天')",
      "        # * 顶部按钮列表",
      "        self.top_buttons = [",
      "            self.home_btn,",
      "            self.chat_btn,",
      "        ]",
      "",
      "        # * 底部按钮",
      "        self.setting_btn = self.button(icon=ft.Icons.SETTINGS, text='设置')",
      "        # * 底部按钮列表",
      "        self.bottom_buttons = [",
      "            self.setting_btn,",
      "        ]",
      "",
      "        # * 顶部 + 底部 按钮列表(用于初始化启动时指定启动页面选项)",
      "        self.all_buttons = self.top_buttons + self.bottom_buttons",
      "",
      "    @property  # * 侧边栏轨道样式",
      "    def rail(self):",
      "        \"\"\"",
      "        侧边栏轨道样式",
      "        \"\"\"",
      "        self.__rail = ft.Column(  # * [垂直]布局",
      "            controls=[",
      "                ft.Column(  # * [垂直]布局",
      "                    controls=[*self.top_buttons],",
      "                    spacing=1,",
      "                ),",
      "                ft.Column(  # * [垂直]布局",
      "                    controls=[",
      "                        *self.bottom_buttons,",
      "                        self.theme_button,",
      "                    ],",
      "                    spacing=1,",
      "                ),",
      "            ],",
      "            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,",
      "            horizontal_alignment=ft.CrossAxisAlignment.CENTER,",
      "            width=128,",
      "        )",
      "        return self.__rail",
      "",
      "    def button(self, icon: ft.IconValueOrControl, text: str, data: str | None = None):",
      "        \"\"\"",
      "        封装 ElevatedButton 按钮",
      "        \"\"\"",
      "        if isinstance(icon, ft.IconEnums):",
      "            __button = ft.Button(",
      "                content=ft.Row(  # * [水平]布局",
      "                    controls=[",
      "                        ft.Icon(name=icon),",
      "                        ft.Text(value=text, size=18),",
      "                    ],",
      "                    expand=True,",
      "                    height=40,",
      "                ),",
      "                style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=4), icon_size=24),",
      "                data=data,",
      "            )",
      "        else:",
      "            __button = ft.Button(",
      "                content=ft.Row(  # * [水平]布局",
      "                    controls=[",
      "                        ft.Image(src=icon, width=24, border_radius=16),",
      "                        ft.Text(value=text, size=18),",
      "                    ],",
      "                    expand=True,",
      "                    height=40,",
      "                ),",
      "                style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=4)),",
      "                data=data,",
      "            )",
      "        return __button",
      "",
      "    @property  # * 主题切换按钮",
      "    def theme_button(self):",
      "        \"\"\"",
      "        通过 darkdetect 检测系统主题,设置主题切换按钮  # ! import darkdetect  # * 引入 darkdetect 检测系统主题",
      "        \"\"\"",
      "        is_dark = darkdetect.isDark()",
      "        if is_dark:  # 当前系统: 暗黑模式",
      "            ico = ft.Icons.DARK_MODE",
      "            selected_ico = ft.Icons.LIGHT_MODE",
      "        else:  # 当前系统: 浅色模式",
      "            ico = ft.Icons.LIGHT_MODE",
      "            selected_ico = ft.Icons.DARK_MODE",
      "        self.__theme_btn = ft.IconButton(",
      "            icon=ico,",
      "            selected_icon=selected_ico,",
      "            on_click=self.toggle_theme,",
      "            style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=4)),",
      "            expand=True,",
      "            width=128,",
      "        )",
      "        return self.__theme_btn",
      "",
      "    def toggle_theme(self, e: ft.ControlEvent):",
      "        \"\"\"",
      "        改变主题模式  # ! import darkdetect  # * 引入 darkdetect 检测系统主题",
      "        :param e: 事件对象",
      "        eg.主题切换按钮:  # * [使用 ft.IconButton 中的 selected_icon 属性切换图标]",
      "            is_dark = darkdetect.isDark()",
      "            if is_dark:  # 当前系统: 暗黑模式",
      "                ico = ft.Icons.DARK_MODE",
      "                selected_ico = ft.Icons.LIGHT_MODE",
      "            else:  # 当前系统: 浅色模式",
      "                ico = ft.Icons.LIGHT_MODE",
      "                selected_ico = ft.Icons.DARK_MODE",
      "            ft.IconButton(icon=ico, selected_icon=selected_ico, on_click=toggle_theme)",
      "        \"\"\"",
      "        if self.page.theme_mode == ft.ThemeMode.SYSTEM:",
      "            is_dark = darkdetect.isDark()",
      "            # if is_dark:",
      "            #     self.page.theme_mode = ft.ThemeMode.LIGHT  # 当前系统: 浅色模式",
      "            # else:",
      "            #     self.page.theme_mode = ft.ThemeMode.DARK  # 当前系统: 暗黑模式",
      "            self.page.theme_mode = ft.ThemeMode.LIGHT if is_dark else ft.ThemeMode.DARK",
      "        else:",
      "            # if self.page.theme_mode == ft.ThemeMode.DARK:  # 当前系统: 暗黑模式",
      "            #     self.page.theme_mode = ft.ThemeMode.LIGHT",
      "            # elif self.page.theme_mode == ft.ThemeMode.LIGHT:  # 当前系统: 浅色模式",
      "            #     self.page.theme_mode = ft.ThemeMode.DARK",
      "            self.page.theme_mode = ft.ThemeMode.LIGHT if self.page.theme_mode == ft.ThemeMode.DARK else ft.ThemeMode.DARK",
      "        e.control.selected = not e.control.selected  # * 切换按钮选中状态",
      "        self.page.update()",
      "",
      "",
      "class TabView(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(self, page: ft.Page) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建 flet 类 Container 容器对象, 构建内容页面",
      "        继承父类ft.Container容器常用基础参数",
      "            expand=True:拉伸 / width:指定宽度 | height:指定高度",
      "            bgcolor:背景颜色 | border_radius:圆角 | padding:内边距 | margin:外边距",
      "        :param page: ft.Page | 页面对象",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类ft.Container容器对象属性[expand=True:拉伸/width:指定宽度/height:指定高度]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      "    @property  # * 主页",
      "    def home_view(self):",
      "        self.__home_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='✨--欢迎━(*｀∀´*)ノ亻!--', size=48),",
      "            ],",
      "            expand=True,",
      "        )",
      "        return self.__home_view",
      "",
      "    @property  # * 设置页",
      "    def setting_view(self):",
      "        self.__setting_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='🕹️设置', size=48),",
      "            ],",
      "            expand=True,",
      "        )",
      "        return self.__setting_view",
      "",
      "",
      "class MianApp(ft.Container):",
      "    # * class default args(类变量) | signal(信号)",
      "    def __init__(self, page: ft.Page) -> None:",
      "        # * class input args(参数)",
      "        \"\"\"",
      "        创建 flet 类 Container 容器对象",
      "        继承父类ft.Container容器常用基础参数",
      "            expand=True:拉伸 / width:指定宽度 | height:指定高度",
      "            bgcolor:背景颜色 | border_radius:圆角 | padding:内边距 | margin:外边距",
      "        \"\"\"",
      "        super().__init__(expand=True)  # * 继承父类ft.Container容器对象属性[expand=True:拉伸/width:指定宽度/height:指定高度]",
      "        self.page: ft.Page = page  # * 定义页面对象(self.page: ft.Page 使用类型约束规避 None)",
      "",
      "        # * 页面配置",
      "        self.page_conf",
      "",
      "        # * 侧边栏配置",
      "        self.sidebar = SideBar(page=self.page)",
      "        # * 定义侧边栏按钮数据",
      "        self.sidebar.home_btn.data = 'home'",
      "        self.sidebar.chat_btn.data = 'chat'",
      "        self.sidebar.setting_btn.data = 'setting'",
      "        # * 配置侧边栏事件",
      "        self.sidebar.home_btn.on_click = lambda e: self.change_view(e)",
      "        self.sidebar.chat_btn.on_click = lambda e: self.change_view(e)",
      "        self.sidebar.setting_btn.on_click = lambda e: self.change_view(e)",
      "",
      "        # * 声明 self.current_selection 变量: 用于追踪当前选中的按钮; 并知道你个初始值",
      "        self.current_selection: ft.ElevatedButton = self.sidebar.all_buttons[0]",
      "",
      "        # * 配置内容视图字典",
      "        self.views = {",
      "            # * 自定义内容视图",
      "            'home': TabView(page=self.page).home_view,",
      "            'setting': TabView(page=self.page).setting_view,",
      "            # * 内置(错误)内容视图",
      "            'loading': self.loading_view,",
      "            'error': self.error_view,",
      "        }",
      "",
      "        # * 激活内容视图",
      "        self.view = ft.Container(  # * 容器对象",
      "            content=self.views['loading'],",
      "            expand=True,",
      "        )",
      "",
      "        self.page.add(",
      "            ft.Row(  # * [水平]布局",
      "                controls=[  # * 添加控件",
      "                    self.sidebar.rail,",
      "                    ft.VerticalDivider(width=1),  # * 垂直分割线",
      "                    self.view,",
      "                ],",
      "                expand=True,  # * 拉伸(若限制 宽度/高度, 则此属性无效)",
      "                spacing=0,  # * 元素间距",
      "            )",
      "        )",
      "",
      "        # * --- 设置默认选中项(模拟点击事件) ---",
      "        class MockEvent(ft.ControlEvent):",
      "            def __init__(self, control: ft.ElevatedButton):",
      "                \"\"\"",
      "                包装模拟点击按钮事件",
      "                \"\"\"",
      "                self.control = control",
      "                self.data = control.data  # 确保 data 属性也存在",
      "",
      "        # * 模拟手动触发第一个按钮的点击事件",
      "        self.change_view(MockEvent(self.current_selection))",
      "",
      "    def change_view(self, e: ft.ControlEvent):",
      "        \"\"\"",
      "        内容页面切换",
      "        \"\"\"",
      "        if self.current_selection and self.current_selection.style:  # 旧的选中按钮",
      "            self.current_selection.style.bgcolor = None  # 重置当前选中按钮的样式",
      "            self.current_selection.style.side = None  # 重置当前选中按钮的边框样式",
      "            self.current_selection.style.text_style = None  # 重置当前选中按钮的文本样式",
      "        self.current_selection: ft.ElevatedButton = e.control  # 将 e.control 明确声明为 ElevatedButton 类型, 并赋给 self.current_selection",
      "        if self.current_selection and self.current_selection.style:  # 新的选中按钮",
      "            self.current_selection.style.bgcolor = ft.Colors.with_opacity(0.5, ft.Colors.LIGHT_BLUE_700)  # 设置当前选中按钮的样式",
      "            self.current_selection.style.side = ft.BorderSide(width=2, color=ft.Colors.LIGHT_GREEN_ACCENT_700)  # 设置当前选中按钮的边框样式",
      "            self.current_selection.style.text_style = ft.TextStyle(font_family='BoldFont')  # 设置当前选中按钮的文本样式",
      "        # * 切换内容视图",
      "        self.view.content = self.views[e.control.data] if e.control.data in self.views.keys() else self.views['error']",
      "        self.page.update()",
      "",
      "    @property  # * 页面配置属性",
      "    def page_conf(self):",
      "        \"\"\"",
      "        页面配置",
      "        \"\"\"",
      "        # * 页面标题",
      "        self.page.title = '🤖Flet Counter Example'",
      "        # * 字体",
      "        self.page.fonts = {",
      "            'LightFont': str(Path(Path(__file__).parent.resolve(), './src/assets/Fonts/MiSans-Light.ttf')),",
      "            'NormalFont': str(Path(Path(__file__).parent.resolve(), './src/assets/Fonts/MiSans-Normal.ttf')),",
      "            'BoldFont': str(Path(Path(__file__).parent.resolve(), './src/assets/Fonts/MiSans-Bold.ttf')),",
      "        }",
      "        # * 定义主题方案 [字体 | 配色]",
      "        self.page.theme = ft.Theme(",
      "            font_family='NormalFont',",
      "            color_scheme=ft.ColorScheme(  # 浅色主题配色方案",
      "                primary=ft.Colors.BLACK,  # 应用界面和组件中的主要颜色[图标/按钮/标签 等界面元素或控件的颜色]",
      "            ),",
      "        )",
      "        self.page.dark_theme = ft.Theme(",
      "            font_family='NormalFont',",
      "            color_scheme=ft.ColorScheme(  # 深色主题配色方案",
      "                primary=ft.Colors.WHITE,  # 应用界面和组件中的主要颜色[图标/按钮/标签 等界面元素或控件的颜色]",
      "            ),",
      "        )",
      "        # * 主题模式 (LIGHT: 浅色, DARK: 深色, SYSTEM[默认]: 系统默认)",
      "        self.page.theme_mode = ft.ThemeMode.SYSTEM",
      "        # * 子控件[垂直]对齐方式 (START[默认]: 顶部, CENTER: 居中, END: 底部, SPACE_BETWEEN: 上下两端对齐, SPACE_AROUND: 上下两端对齐, SPACE_EVENLY: 上下两端对齐)",
      "        self.page.vertical_alignment = ft.MainAxisAlignment.START",
      "        # * 子控件[水平]对齐方式 (START[默认]: 左侧, CENTER: 居中, END: 右侧, STRETCH: 拉伸, BASELINE: 基线对齐)",
      "        self.page.horizontal_alignment = ft.CrossAxisAlignment.START",
      "        # * 页面内边距 (0[默认]: 无内边距, 10: 10px内边距)",
      "        self.page.padding = 0",
      "        # * 页面外边距 (0[默认]: 无外边距, 10: 10px外边距)",
      "        self.page.spacing = 0",
      "        # * 桌面应用/页面 图标 (相对路径)",
      "        # self.page.window.icon = 'assets/icon.png'",
      "        # * 桌面应用/页面 对齐方式(初始位置) [ft.Alignment: 居中:(0,0); 左上:(-1, -1); 右下:(1, 1)]",
      "        self.page.window.alignment = ft.Alignment(0, 0)",
      "        # * 桌面应用/页面 宽度 | 高度",
      "        self.page.window.width = 1280",
      "        self.page.window.height = 720",
      "        # * 桌面应用/页面 最小宽度 | 最小高度",
      "        self.page.window.min_width = 1280",
      "        self.page.window.min_height = 720",
      "        return self.page",
      "",
      "    @property  # * loading_加载中页面",
      "    def loading_view(self):",
      "        \"\"\"",
      "        loading: 加载中页面",
      "        \"\"\"",
      "        self.__loading_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='loading...', size=32, color=ft.Colors.GREY_500),",
      "            ],",
      "            expand=True,",
      "            alignment=ft.MainAxisAlignment.CENTER,",
      "            horizontal_alignment=ft.CrossAxisAlignment.CENTER,",
      "        )",
      "        return self.__loading_view",
      "",
      "    @property  # * 404_错误页面",
      "    def error_view(self):",
      "        \"\"\"",
      "        404: 错误页面",
      "        \"\"\"",
      "        self.__error_view = ft.Column(",
      "            controls=[",
      "                ft.Text(value='code: 404', size=64),",
      "                ft.Button(",
      "                    content=ft.Text(value='🔞', size=64, expand=True),",
      "                    width=128,",
      "                    height=128,",
      "                    on_click=lambda e: self.dialog_tmpl(e),",
      "                ),",
      "            ],",
      "            expand=True,",
      "            alignment=ft.MainAxisAlignment.CENTER,",
      "            horizontal_alignment=ft.CrossAxisAlignment.CENTER,",
      "        )",
      "        return self.__error_view",
      "",
      "    def dialog_tmpl(self, e: ft.ControlEvent):",
      "        \"\"\"",
      "        AlertDialog 界面模版",
      "        模拟点击后弹窗等待事件处理",
      "        :param e: ft.ControlEvent 事件对象",
      "        \"\"\"",
      "        e_control: ft.ElevatedButton = e.control  # 获取当前点击的按钮",
      "        e_control.disabled = True  # 禁用按钮",
      "        e_control.update()  # 更新按钮",
      "        dlg = ft.AlertDialog(",
      "            modal=True,  # 是否可以通过单击外部区域关闭弹窗[默认:False 可通过单击外部的区域关闭对话框](modal 属性无法改变)",
      "            title=ft.Text(value='☣️', size=64),  # 弹窗标题",
      "            content=ft.Row(  # * 弹窗内容",
      "                controls=[",
      "                    ft.ProgressRing(),  # 环形循环旋转进度指示器",
      "                    ft.Text(value='正在处理……', size=32),",
      "                ],",
      "            ),",
      "            alignment=ft.alignment.center,  # 弹窗对齐方式",
      "            actions=[],  # 弹窗底部容器",
      "            actions_alignment=ft.MainAxisAlignment.END,  # 弹窗底部容器水平布局",
      "            on_dismiss=lambda e: print(f'弹窗关闭事件:{e}'),  # 关闭对话框时触发事件",
      "        )",
      "        self.page.open(dlg)",
      "        # * 模拟处理耗时...",
      "",
      "        # * 更新弹窗内容并允许关闭",
      "        dlg.content = ft.Text(value='处理完毕！', size=32)",
      "        dlg.actions.append(ft.ElevatedButton(text='确定', on_click=lambda e: self.page.close(dlg)))",
      "        dlg.update()",
      "        e_control.disabled = False  # 恢复按钮可用",
      "        e_control.update()  # 更新按钮",
      "",
      "",
      "if __name__ == '__main__':",
      "    \"\"\"",
      "    运行入口 | 调试运行",
      "    \"\"\"",
      "    ft.app(",
      "        target=MianApp,  # * 运行目标[包含 page.add 的函数或类名]",
      "        use_color_emoji=True,  # * emoji表情是否使用颜色",
      "        # view=ft.WEB_BROWSER,  # *运行模式: (默认:独立窗口, WEB_BROWSER:浏览器)",
      "    )",
      ""
    ],
    "description": ["描述"]
  }
}

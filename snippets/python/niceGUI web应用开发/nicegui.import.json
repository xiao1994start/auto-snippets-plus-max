{
  "引入 nicegui web应用开发框架": {
    "prefix": ["import_nicegui_ui"],
    "body": [
      "from pathlib import Path",
      "",
      "from ex4nicegui import effect, effect_refreshable, ref_computed, rxui, to_ref",
      "from nicegui import app, events, run, ui",
      "",
      "# * 引入静态资源文件 可以使用 .classes 属性访问静态资源文件",
      "app.add_static_files(url_path='/asstes', local_directory=Path(Path(__file__).parent.resolve(), 'src', 'assets'))",
      "# * 定义字体文件",
      "font_path = Path(Path(__file__).parent.resolve(), 'src', 'assets', 'fonts', 'MiSans-Bold.ttf')",
      "font_family = font_path.stem  # * 获取字体文件名(不带后缀)",
      "css_content = f\"\"\"",
      "    @font-face {{",
      "        font-family: '{font_family}';",
      "        src: url('{font_path}') format('truetype');",
      "    }}",
      "",
      "    body {{",
      "        font-family: '{font_family}', sans-serif !important;",
      "    }}",
      "",
      "    .q-btn, .q-input, .q-label, .q-menu {{",
      "        font-family: '{font_family}', sans-serif !important;",
      "    }}",
      "\"\"\"",
      "ui.add_css(css_content)",
      ""
    ],
    "description": ["引入 nicegui web应用开发框架"]
  },
  "引入 nicegui web应用开发框架 模版": {
    "prefix": ["import_nicegui_ui=home_page"],
    "body": [
      "from pathlib import Path",
      "",
      "from ex4nicegui import effect, effect_refreshable, ref_computed, rxui, to_ref",
      "from nicegui import app, events, run, ui",
      "",
      "# * 引入静态资源文件 可以使用 .classes 属性访问静态资源文件",
      "app.add_static_files(url_path='/asstes', local_directory=Path(Path(__file__).parent.resolve(), 'src', 'assets'))",
      "# * 定义字体文件",
      "font_path = Path(Path(__file__).parent.resolve(), 'src', 'assets', 'fonts', 'MiSans-Bold.ttf')",
      "font_family = font_path.stem  # * 获取字体文件名(不带后缀)",
      "css_content = f\"\"\"",
      "    @font-face {{",
      "        font-family: '{font_family}';",
      "        src: url('{font_path}') format('truetype');",
      "    }}",
      "",
      "    body {{",
      "        font-family: '{font_family}', sans-serif !important;",
      "    }}",
      "",
      "    .q-btn, .q-input, .q-label, .q-menu {{",
      "        font-family: '{font_family}', sans-serif !important;",
      "    }}",
      "\"\"\"",
      "ui.add_css(css_content)",
      "",
      "",
      "# * 页面配置",
      "ui.label('你好 NiceGUI!')",
      "",
      "if __name__ in {'__main__', '__mp_main__'}:",
      "    \"\"\"",
      "    NiceGUI 运行入口 | 调试运行",
      "    nicegui: https://nicegui.io/documentation",
      "    Quasar: https://quasar.dev/docs",
      "    Quasar_zh: http://www.quasarchs.com/",
      "    \"\"\"",
      "",
      "    # todo 运行配置",
      "    def startup_port():",
      "        \"\"\"",
      "        启动时执行获取随机端口函数",
      "        \"\"\"",
      "        import random  # * (伪)随机模块",
      "        import socket  # * socket网络通信模块",
      "",
      "        port = 8080",
      "        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:",
      "            while True:",
      "                try:",
      "                    s.bind(('localhost', port))",
      "                    print(f'>> Port {port} is available')",
      "                    break",
      "                except ConnectionRefusedError:  # ConnectionRefusedError: 连接被拒绝, 端口未被占用",
      "                    # ! 端口被占用，尝试下一个端口",
      "                    print(f'>> Port {port} 已被占用, 尝试下一个端口...')",
      "                except OSError:  # OSError: [Errno 98] Address already in use, 端口已被占用",
      "                    print('>> 操作系统错误')",
      "                except Exception as error:  # Exception: 所有异常的基类, 如需对指定类型的异常进行处理, 在上方添加 except [指定异常类型] 即可",
      "                    print('错误类型: ', type(error))",
      "                    print('错误信息: ', error)",
      "                    raise error  # raise: 抛出异常, 程序终止. (如果注释掉, 则程序继续执行, 正常退出)",
      "                port = random.randint(1024, 65535)  # 随机生成端口号",
      "        return port",
      "",
      "    port = app.on_startup(startup_port)  # todo 启动时执行获取随机端口函数",
      "",
      "    is_debug = True  # ! 调试模式开关 (开发True, 生产False)",
      "",
      "    # Native Mode 调用 Pywebview 运行参数配置: https://nicegui.io/documentation/section_configuration_deployment#native_mode",
      "    app.native.window_args['min_size'] = (1080, 720)  # * 窗口最小尺寸",
      "    app.native.window_args['resizable'] = True  # * 窗口缩放大小调整[True: 可调整, False: 不可调整]",
      "    app.native.start_args['debug'] = False  # * 调试模式(浏览器控制台窗口)[True: 开启, False: 关闭]",
      "    ui.run(",
      "        reload=is_debug,  # * 热加载模式开关 [True: 开启, False: 关闭]",
      "        port=port,  # * 端口",
      "        title='My_NiceGUI_App',  # * 窗口标题",
      "        favicon='🚀',  # * 窗口图标",
      "        dark=None,  # * 主题模式[None: 自动, True: 深色, False: 浅色]",
      "        language='zh-CN',  # * 语言[zh-CN: 中文, en: 英文]",
      "        show=True,  # * 在浏览器选项卡中自动打开 UI (使用 pywebview 运行时使用False)",
      "        native=True,  # * 使用 Native Mode 运行 (使用 pywebview 运行时使用False)",
      "        window_size=(1024, 786),  # * 窗口尺寸",
      "        frameless=False,  # * 无边框窗口",
      "    )",
      ""
    ],
    "description": ["引入 nicegui web应用开发框架 模版"]
  }
}
